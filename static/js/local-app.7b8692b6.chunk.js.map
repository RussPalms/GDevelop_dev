{"version":3,"file":"static/js/local-app.7b8692b6.chunk.js","mappings":"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","sources":["JsExtensionsLoader/LocalJsExtensionsFinder.js","JsExtensionsLoader/LocalJsExtensionsLoader.js","ResourcesList/LocalEmbeddedResourceSources.js","ResourcesList/LocalResourceSources.js","ResourcesList/LocalResourceExternalEditors.js","Utils/LocalUserInfo.js","ExportAndShare/LocalExporters/LocalFileSystem.js","ExportAndShare/LocalExporters/LocalPreviewLauncher/LocalNetworkPreviewDialog.js","ExportAndShare/LocalExporters/LocalPreviewLauncher/LocalPreviewDebuggerServer.js","ExportAndShare/LocalExporters/LocalPreviewLauncher/index.js","Utils/TimeFunction.js","ExportAndShare/LocalExporters/LocalCordovaExport.js","ExportAndShare/LocalExporters/LocalElectronExport.js","ExportAndShare/LocalExporters/LocalHTML5Export.js","UI/LocalFilePicker/index.js","Utils/OptionalLazyRequire.js","Utils/LocalArchiver.js","ExportAndShare/LocalExporters/LocalFacebookInstantGamesExport.js","ExportAndShare/LocalExporters/LocalFileUploader.js","ExportAndShare/LocalExporters/LocalOnlineCordovaExport.js","ExportAndShare/LocalExporters/LocalOnlineCordovaIosExport.js","ExportAndShare/LocalExporters/LocalOnlineElectronExport.js","ExportAndShare/LocalExporters/LocalOnlineWebExport.js","ExportAndShare/LocalExporters/index.js","MainFrame/ElectronMainMenu.js","EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter.js","EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener.js","Utils/ObjectSplitter.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectOpener.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectWriter.js","UI/CustomSvgIcons/Computer.js","ProjectsStorage/LocalFileStorageProvider/LocalProjectResourcesHandler.js","ProjectsStorage/LocalFileStorageProvider/LocalFileResourcesWatcher.js","ProjectsStorage/LocalFileStorageProvider/index.js","GameEngineFinder/LocalGDJSDevelopmentWatcher.js","ProjectsStorage/LocalFileStorageProvider/LocalFileResourceMover.js","Utils/ProcessByChunk.js","Utils/LocalFileUploader.js","ProjectsStorage/ResourceMover/LocalResourceMover.js","ProjectsStorage/ResourceFetcher/LocalResourceFetcher.js","LoginProvider/LocalLoginProvider.js","LocalApp.js"],"sourcesContent":["// Note: this file does not use export/imports nor Flow to allow its usage from Node.js\n\nconst { findGDJS } = require('../GameEngineFinder/LocalGDJSFinder');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\n\nconst checkIfPathHasJsExtensionModule = extensionFolderPath => {\n  return new Promise(resolve => {\n    const jsExtensionModulePath = path.join(\n      extensionFolderPath,\n      'JsExtension.js'\n    );\n    fs.stat(jsExtensionModulePath, (err, stats) => {\n      if (err) {\n        return resolve(null);\n      }\n\n      return resolve(stats.isFile() ? jsExtensionModulePath : null);\n    });\n  });\n};\n\nconst findJsExtensionModules = ({ filterExamples, onFindGDJS }) => {\n  return (onFindGDJS ? onFindGDJS() : findGDJS()).then(({ gdjsRoot }) => {\n    const extensionsRoot = path.join(gdjsRoot, 'Runtime', 'Extensions');\n    console.info(\n      `Searching for JS extensions (file called JsExtension.js) in ${extensionsRoot}...`\n    );\n    return new Promise((resolve, reject) => {\n      fs.readdir(extensionsRoot, (error, extensionFolders) => {\n        if (error) {\n          return reject(error);\n        }\n\n        const filteredExtensionFolders = extensionFolders.filter(folder => {\n          if (!filterExamples) return true;\n\n          return folder.indexOf('Example') === -1;\n        });\n\n        Promise.all(\n          filteredExtensionFolders.map(extensionFolder =>\n            checkIfPathHasJsExtensionModule(\n              path.join(extensionsRoot, extensionFolder)\n            )\n          )\n        ).then(modulePaths => {\n          resolve(modulePaths.filter(modulePath => !!modulePath));\n        }, reject);\n      });\n    });\n  });\n};\n\nmodule.exports = {\n  findJsExtensionModules,\n};\n","// @flow\n// Note: this file does not use export/imports and use Flow comments to allow its usage from Node.js\n\nconst { loadExtension } = require('.');\nconst optionalRequire = require('../Utils/OptionalRequire');\nconst { findJsExtensionModules } = require('./LocalJsExtensionsFinder');\n\n/*flow-include\nimport type {JsExtensionsLoader, TranslationFunction} from '.';\nimport ObjectsEditorService from '../ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from '../ObjectsRendering/ObjectsRenderingService';\n\ntype MakeExtensionsLoaderArguments = {|\n  gd: any,\n  objectsEditorService: typeof ObjectsEditorService,\n  objectsRenderingService: typeof ObjectsRenderingService,\n  filterExamples: boolean,\n  onFindGDJS?: ?() => Promise<{gdjsRoot: string}>\n|};\n*/\n\n/**\n * Loader that will find all JS extensions declared in GDJS/Runtime/Extensions/xxx/JsExtension.js.\n * If you add a new extension and also want it to be available for the web-app version, add it in\n * BrowserJsExtensionsLoader.js\n */\nmodule.exports = function makeExtensionsLoader(\n  {\n    gd,\n    objectsEditorService,\n    objectsRenderingService,\n    filterExamples,\n    onFindGDJS,\n  } /*: MakeExtensionsLoaderArguments*/\n) /*: JsExtensionsLoader*/ {\n  return {\n    loadAllExtensions: (_ /*: TranslationFunction */) => {\n      return findJsExtensionModules({ filterExamples, onFindGDJS }).then(\n        extensionModulePaths => {\n          return Promise.all(\n            extensionModulePaths.map(extensionModulePath => {\n              let extensionModule = null;\n              try {\n                extensionModule = optionalRequire(extensionModulePath, {\n                  rethrowException: true,\n                });\n              } catch (ex) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    message:\n                      'Unable to import extension. Please check for any syntax error or error that would prevent it from being run.',\n                    error: true,\n                    rawError: ex,\n                  },\n                };\n              }\n\n              if (!extensionModule) {\n                return {\n                  extensionModulePath,\n                  result: {\n                    error: true,\n                    message:\n                      'Unknown error. Please check for any syntax error or error that would prevent it from being run.',\n                  },\n                };\n              }\n\n              if (\n                objectsEditorService &&\n                extensionModule.registerEditorConfigurations\n              ) {\n                extensionModule.registerEditorConfigurations(\n                  objectsEditorService\n                );\n              }\n\n              if (objectsRenderingService) {\n                if (extensionModule.registerInstanceRenderers) {\n                  extensionModule.registerInstanceRenderers(\n                    objectsRenderingService\n                  );\n                }\n                if (extensionModule.registerClearCache) {\n                  extensionModule.registerClearCache(objectsRenderingService);\n                }\n              }\n\n              return {\n                extensionModulePath,\n                result: loadExtension(\n                  _,\n                  gd,\n                  gd.JsPlatform.get(),\n                  extensionModule\n                ),\n              };\n            })\n          );\n        },\n        err => {\n          console.error(`Unable to find JS extensions modules`);\n          throw err;\n        }\n      );\n    },\n  };\n};\n","// @flow\nimport optionalRequire from '../Utils/OptionalRequire';\nimport newNameGenerator from '../Utils/NewNameGenerator';\nimport { isPathInProjectFolder } from './ResourceUtils';\nimport { createNewResource } from './ResourceSource';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\n\nexport type EmbeddedResource = {|\n  resourceKind: string,\n  resourceName?: string,\n\n  /** The \"path\" to the embedded resource (e.g: a tileset) as stored in the parent resource (e.g: a tilemap). */\n  relPath: string,\n\n  /** The full path to the file of the embedded resource. */\n  fullPath: string,\n\n  /** True if the embedded resource file is outside the project folder. */\n  isOutsideProjectFolder: boolean,\n|};\n\nexport type EmbeddedResources = {|\n  hasAnyEmbeddedResourceOutsideProjectFolder: boolean,\n  embeddedResources: Map<string, EmbeddedResource>,\n|};\n\nexport type MappedResources = {|\n  mapping: { [key: string]: string },\n|};\n\ntype ParseEmbeddedFiles = (\n  project: gdProject,\n  filePath: string\n) => Promise<?EmbeddedResources>;\n\n/**\n * Copy the embedded resources inside the project folder\n */\nexport async function copyAllEmbeddedResourcesToProjectFolder(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n) {\n  if (!fs || !path) {\n    return;\n  }\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const copies = [];\n\n  for (const {\n    hasAnyEmbeddedResourceOutsideProjectFolder,\n    embeddedResources,\n  } of filesWithEmbeddedResources.values()) {\n    if (!hasAnyEmbeddedResourceOutsideProjectFolder) continue;\n\n    for (const embedded of embeddedResources.values()) {\n      if (!embedded.isOutsideProjectFolder) continue;\n\n      const resourceBasename = path.basename(embedded.fullPath);\n      const fileExtension = path.extname(resourceBasename);\n      const fileNameWithoutExtension = path.basename(\n        resourceBasename,\n        fileExtension\n      );\n\n      const newFileNameWithoutExtension = newNameGenerator(\n        fileNameWithoutExtension,\n        tentativeFileName => {\n          const tentativePath =\n            path.join(projectPath, tentativeFileName) + fileExtension;\n          return fs.existsSync(tentativePath);\n        }\n      );\n\n      const resourceNewPath = path.join(\n        projectPath,\n        newFileNameWithoutExtension + fileExtension\n      );\n\n      embedded.resourceName = newFileNameWithoutExtension + fileExtension;\n\n      copies.push(fs.promises.copyFile(embedded.fullPath, resourceNewPath));\n    }\n  }\n\n  return Promise.all(copies);\n}\n\n/**\n * Create the mapping between embedded resource path (e.g: path to a tileset) to its resource name (i.e: the name of\n * the resource containing the tileset).\n */\nexport function createAndMapEmbeddedResources(\n  project: gdProject,\n  filesWithEmbeddedResources: Map<string, EmbeddedResources>\n): Map<string, MappedResources> {\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const filesWithMappedResources = new Map<string, MappedResources>();\n  for (const [filePath, { embeddedResources }] of filesWithEmbeddedResources) {\n    const mapping = {};\n    for (let {\n      resourceKind,\n      resourceName,\n      relPath,\n      fullPath,\n    } of embeddedResources.values()) {\n      if (!resourceName) {\n        resourceName = path.relative(projectPath, fullPath);\n      }\n\n      const theEmbeddedResource = createNewResource(resourceKind);\n      if (theEmbeddedResource) {\n        theEmbeddedResource.setName(resourceName);\n        theEmbeddedResource.setFile(resourceName);\n\n        mapping[relPath] = resourceName;\n\n        // embedded resources can have mappings too\n        if (filesWithMappedResources.has(fullPath)) {\n          const mappedResources = filesWithMappedResources.get(fullPath);\n\n          if (mappedResources && mappedResources.mapping) {\n            theEmbeddedResource.setMetadata(\n              JSON.stringify({\n                embeddedResourcesMapping: mappedResources.mapping,\n              })\n            );\n\n            filesWithMappedResources.delete(fullPath);\n          }\n        }\n\n        project.getResourcesManager().addResource(theEmbeddedResource);\n      }\n    }\n\n    filesWithMappedResources.set(filePath, {\n      mapping,\n    });\n  }\n\n  return filesWithMappedResources;\n}\n\n/**\n * List the embedded resources of a Tilemap (or JSON) resource.\n * Supports LDtk tilemaps.\n *\n * @param project The project\n * @param filePath The file path of a resource\n * @returns\n */\nexport async function listTileMapEmbeddedResources(\n  project: gdProject,\n  filePath: string\n): Promise<?EmbeddedResources> {\n  if (!fs || !path) {\n    return null;\n  }\n\n  const data = await fs.promises.readFile(filePath, 'utf8');\n  try {\n    const tileMap = JSON.parse(data);\n\n    // For LDtk tilemaps, read the tilesets.\n    if (tileMap && tileMap.__header__ && tileMap.__header__.app === 'LDtk') {\n      const dir = path.dirname(filePath);\n      const embeddedResources = new Map<string, EmbeddedResource>();\n      let hasAnyEmbeddedResourceOutsideProjectFolder = false;\n\n      for (const tileset of tileMap.defs.tilesets) {\n        if (tileset.relPath) {\n          const relPath = tileset.relPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(relPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      for (const level of tileMap.levels) {\n        if (level.bgRelPath) {\n          const relPath = level.bgRelPath;\n          const fullPath = path.resolve(dir, relPath);\n          const isOutsideProjectFolder = !isPathInProjectFolder(\n            project,\n            fullPath\n          );\n          const resource: EmbeddedResource = {\n            resourceKind: 'image',\n            relPath,\n            fullPath,\n            isOutsideProjectFolder,\n          };\n\n          embeddedResources.set(level.bgRelPath, resource);\n\n          if (isOutsideProjectFolder)\n            hasAnyEmbeddedResourceOutsideProjectFolder = true;\n        }\n      }\n\n      return {\n        hasAnyEmbeddedResourceOutsideProjectFolder,\n        embeddedResources,\n      };\n    }\n  } catch (error) {\n    console.error(\n      `Unable to read properly the data from file ${filePath} for use as a tilemap - ignoring any potentially embedded resources.`\n    );\n    return null;\n  }\n}\n\nexport async function listSpineEmbeddedResources(\n  project: gdProject,\n  filePath: string\n): Promise<?EmbeddedResources> {\n  if (!fs || !path) return null;\n\n  const atlasPath = filePath.replace('.json', '.atlas');\n  const hasAtlasWithSameBasename = await new Promise<boolean>(resolve => {\n    fs.promises\n      .access(atlasPath, fs.constants.F_OK)\n      .then(() => resolve(true))\n      .catch(() => resolve(false));\n  });\n\n  // Spine resources usually have the same base names:\n  // e.g. skeleton.json, skeleton.atlas and skeleton.png.\n  if (!hasAtlasWithSameBasename) {\n    console.error(`Could not find an atlas file for Spine file ${filePath}.`);\n    return null;\n  }\n\n  const atlasFileName = path.basename(atlasPath);\n  const embeddedResources = new Map<string, EmbeddedResource>();\n  const isOutsideProjectFolder = !isPathInProjectFolder(project, atlasPath);\n  const resource: EmbeddedResource = {\n    resourceKind: 'atlas',\n    relPath: atlasFileName,\n    fullPath: atlasPath,\n    isOutsideProjectFolder,\n  };\n\n  embeddedResources.set(atlasFileName, resource);\n\n  return {\n    embeddedResources,\n    hasAnyEmbeddedResourceOutsideProjectFolder: isOutsideProjectFolder,\n  };\n}\n\nexport async function listSpineTextureAtlasEmbeddedResources(\n  project: gdProject,\n  filePath: string\n): Promise<?EmbeddedResources> {\n  if (!fs || !path) return null;\n\n  let atlasContent: ?string = null;\n  try {\n    atlasContent = await fs.promises.readFile(filePath, 'utf8');\n  } catch (error) {\n    console.error(\n      `Unable to read Spine Atlas file at path ${filePath}:`,\n      error\n    );\n  }\n\n  if (!atlasContent) return null;\n\n  const atlasImageRegex = /.*\\.(png|jpeg|jpg)$/gm;\n  const imageDependencies = atlasContent.match(atlasImageRegex);\n  if (!imageDependencies) return null;\n\n  const dir = path.dirname(filePath);\n  const embeddedResources = new Map<string, EmbeddedResource>();\n  let hasAnyEmbeddedResourceOutsideProjectFolder = false;\n\n  for (const relatedImagePath of imageDependencies) {\n    const fullPath = path.resolve(dir, relatedImagePath);\n    const isOutsideProjectFolder = !isPathInProjectFolder(project, fullPath);\n    const resource: EmbeddedResource = {\n      resourceKind: 'image',\n      relPath: relatedImagePath,\n      fullPath,\n      isOutsideProjectFolder,\n    };\n\n    embeddedResources.set(relatedImagePath, resource);\n\n    if (isOutsideProjectFolder)\n      hasAnyEmbeddedResourceOutsideProjectFolder = true;\n  }\n\n  return {\n    embeddedResources,\n    hasAnyEmbeddedResourceOutsideProjectFolder,\n  };\n}\n\nexport const embeddedResourcesParsers: { [string]: ParseEmbeddedFiles } = {\n  tilemap: listTileMapEmbeddedResources,\n  json: listTileMapEmbeddedResources,\n  spine: listSpineEmbeddedResources,\n  atlas: listSpineTextureAtlasEmbeddedResources,\n};\n","// @flow\nimport { t, Trans } from '@lingui/macro';\nimport * as React from 'react';\nimport {\n  type ChooseResourceOptions,\n  type ChooseResourceProps,\n  type ResourceSourceComponentProps,\n  type ResourceSource,\n  allResourceKindsAndMetadata,\n} from './ResourceSource';\nimport { ResourceStore } from '../AssetStore/ResourceStore';\nimport { isPathInProjectFolder, copyAllToProjectFolder } from './ResourceUtils';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport Window from '../Utils/Window';\nimport {\n  copyAllEmbeddedResourcesToProjectFolder,\n  embeddedResourcesParsers,\n  createAndMapEmbeddedResources,\n  type EmbeddedResources,\n  type MappedResources,\n} from './LocalEmbeddedResourceSources';\nimport { Line } from '../UI/Grid';\nimport RaisedButton from '../UI/RaisedButton';\nimport { FileToCloudProjectResourceUploader } from './FileToCloudProjectResourceUploader';\n\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\nconst path = optionalRequire('path');\n\ntype ResourceStoreChooserProps = {\n  options: ChooseResourceOptions,\n  onChooseResources: (resources: Array<gdResource>) => void,\n  createNewResource: () => gdResource,\n};\n\nconst ResourceStoreChooser = ({\n  options,\n  onChooseResources,\n  createNewResource,\n}: ResourceStoreChooserProps) => {\n  return (\n    <ResourceStore\n      onChoose={resource => {\n        const chosenResourceUrl = resource.url;\n        const newResource = createNewResource();\n        newResource.setFile(chosenResourceUrl);\n        newResource.setName(path.basename(chosenResourceUrl));\n        newResource.setOrigin('gdevelop-asset-store', chosenResourceUrl);\n\n        onChooseResources([newResource]);\n      }}\n      resourceKind={options.resourceKind}\n    />\n  );\n};\n\nconst localResourceSources: Array<ResourceSource> = [\n  // Have the local resource sources first, so they are used by default/shown first when\n  // the project is saved locally.\n  ...allResourceKindsAndMetadata.map(\n    ({ kind, displayName, fileExtensions, createNewResource }) => {\n      const selectLocalFileResources = async ({\n        i18n,\n        getLastUsedPath,\n        setLastUsedPath,\n        project,\n        options,\n        resourcesImporationBehavior,\n      }: ChooseResourceProps) => {\n        if (!dialog)\n          throw new Error('Electron dialog not supported in this environment.');\n\n        const properties = ['openFile'];\n        if (options.multiSelection) properties.push('multiSelections');\n\n        const projectPath = path.dirname(project.getProjectFile());\n        const latestPath = getLastUsedPath(project, kind) || projectPath;\n\n        const browserWindow = remote.getCurrentWindow();\n        let { filePaths } = await dialog.showOpenDialog(browserWindow, {\n          title: i18n._(t`Choose a file`),\n          properties,\n          filters: [\n            { name: i18n._(t`Supported files`), extensions: fileExtensions },\n          ],\n          defaultPath: latestPath,\n        });\n        if (!filePaths || !filePaths.length) return [];\n\n        const lastUsedPath = path.parse(filePaths[0]).dir;\n        setLastUsedPath(project, kind, lastUsedPath);\n\n        let hasFilesOutsideProjectFolder = filePaths.some(\n          path => !isPathInProjectFolder(project, path)\n        );\n\n        // Some resources, like tilemaps, can have references to other files.\n        // We parse these files, optionally copy them, then create a mapping from the previous file name\n        // as written inside the tilemap to the name of the resource that is representing this file.\n        const filesWithEmbeddedResources = new Map<string, EmbeddedResources>();\n        const parseEmbeddedResources = embeddedResourcesParsers[kind];\n        const recursivelyParseEmbeddedResources = async (\n          initialEmbeddedResources: EmbeddedResources\n        ) => {\n          for (const initialEmbeddedResource of initialEmbeddedResources.embeddedResources.values()) {\n            const embeddedResourseParser =\n              embeddedResourcesParsers[initialEmbeddedResource.resourceKind];\n\n            if (!embeddedResourseParser) continue;\n\n            const { fullPath } = initialEmbeddedResource;\n            const newDependentResources = await embeddedResourseParser(\n              project,\n              fullPath\n            );\n\n            if (newDependentResources) {\n              filesWithEmbeddedResources.set(fullPath, newDependentResources);\n\n              await recursivelyParseEmbeddedResources(newDependentResources);\n            }\n          }\n        };\n        if (parseEmbeddedResources) {\n          for (const filePath of filePaths) {\n            const embeddedResources = await parseEmbeddedResources(\n              project,\n              filePath\n            );\n\n            if (embeddedResources) {\n              await recursivelyParseEmbeddedResources(embeddedResources);\n\n              filesWithEmbeddedResources.set(filePath, embeddedResources);\n\n              if (embeddedResources.hasAnyEmbeddedResourceOutsideProjectFolder)\n                hasFilesOutsideProjectFolder = true;\n            }\n          }\n        }\n\n        // Check if files should be copied in the project folder.\n        const newToOldFilePaths = new Map<string, string>();\n        let filesWithMappedResources = new Map<string, MappedResources>();\n        if (hasFilesOutsideProjectFolder) {\n          let answer: boolean;\n\n          if (resourcesImporationBehavior === 'relative') {\n            answer = false;\n          } else if (resourcesImporationBehavior === 'import') {\n            answer = true;\n          } else {\n            answer = Window.showConfirmDialog(\n              i18n._(\n                t`This/these file(s) are outside the project folder. Would you like to make a copy of them in your project folder first (recommended)?`\n              )\n            );\n          }\n\n          if (answer) {\n            filePaths = await copyAllToProjectFolder(\n              project,\n              filePaths,\n              newToOldFilePaths\n            );\n\n            await copyAllEmbeddedResourcesToProjectFolder(\n              project,\n              filesWithEmbeddedResources\n            );\n          }\n        }\n\n        // In case of resources embedded inside others,\n        // create a mapping from the file name\n        // as written inside the resource (e.g: the tilemap)\n        // to the name of the resource that was created to\n        // represent this file.\n        filesWithMappedResources = createAndMapEmbeddedResources(\n          project,\n          filesWithEmbeddedResources\n        );\n\n        return filePaths.map(filePath => {\n          const newResource = createNewResource();\n          newResource.setFile(path.relative(projectPath, filePath));\n          newResource.setName(path.relative(projectPath, filePath));\n\n          const filePathWithMapping = newToOldFilePaths.has(filePath)\n            ? newToOldFilePaths.get(filePath)\n            : filePath;\n          if (filePathWithMapping) {\n            const mappedResources = filesWithMappedResources.get(\n              filePathWithMapping\n            );\n\n            if (mappedResources && mappedResources.mapping) {\n              newResource.setMetadata(\n                JSON.stringify({\n                  embeddedResourcesMapping: mappedResources.mapping,\n                })\n              );\n            }\n          }\n\n          return newResource;\n        });\n      };\n\n      return {\n        name: 'local-file-opener-' + kind,\n        displayName: t`Choose a file`,\n        displayTab: 'import',\n        onlyForStorageProvider: 'LocalFile',\n        kind,\n        selectResourcesHeadless: selectLocalFileResources,\n        renderComponent: (props: ResourceSourceComponentProps) => (\n          <Line justifyContent=\"center\">\n            <RaisedButton\n              primary\n              label={\n                props.options.multiSelection ? (\n                  <Trans>Choose one or more files</Trans>\n                ) : (\n                  <Trans>Choose a file</Trans>\n                )\n              }\n              onClick={async () => {\n                const resources = await selectLocalFileResources({\n                  i18n: props.i18n,\n                  project: props.project,\n                  fileMetadata: props.fileMetadata,\n                  getStorageProvider: props.getStorageProvider,\n                  getLastUsedPath: props.getLastUsedPath,\n                  setLastUsedPath: props.setLastUsedPath,\n                  options: props.options,\n                  resourcesImporationBehavior:\n                    props.resourcesImporationBehavior,\n                });\n\n                props.onChooseResources(resources);\n              }}\n            />\n          </Line>\n        ),\n      };\n    }\n  ),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `upload-${kind}`,\n    displayName: t`File(s) from your device`,\n    displayTab: 'import',\n    onlyForStorageProvider: 'Cloud',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <FileToCloudProjectResourceUploader\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        fileMetadata={props.fileMetadata}\n        getStorageProvider={props.getStorageProvider}\n        key={`url-chooser-${kind}`}\n        automaticallyOpenInput={!!props.automaticallyOpenIfPossible}\n      />\n    ),\n  })),\n  ...allResourceKindsAndMetadata.map(({ kind, createNewResource }) => ({\n    name: `resource-store-${kind}`,\n    displayName: t`Choose from asset store`,\n    displayTab: 'standalone',\n    kind,\n    renderComponent: (props: ResourceSourceComponentProps) => (\n      <ResourceStoreChooser\n        createNewResource={createNewResource}\n        onChooseResources={props.onChooseResources}\n        options={props.options}\n        key={`resource-store-${kind}`}\n      />\n    ),\n  })),\n];\n\nexport default localResourceSources;\n","// @flow\nimport {\n  type ResourceExternalEditor,\n  type ExternalEditorInput,\n  type ExternalEditorOutput,\n  type ExternalEditorBase64Resource,\n  type EditWithExternalEditorOptions,\n  readMetadata,\n  saveBlobUrlsFromExternalEditorBase64Resources,\n  freeBlobsAndUpdateMetadata,\n  patchExternalEditorMetadataWithResourcesNamesIfNecessary,\n} from './ResourceExternalEditor';\nimport { sendExternalEditorOpened } from '../Utils/Analytics/EventSender';\nimport { t } from '@lingui/macro';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { isBlobURL, isURL } from './ResourceUtils';\nimport {\n  convertBlobToDataURL,\n  downloadUrlsToBlobs,\n  type ItemResult,\n} from '../Utils/BlobDownloader';\nimport { type ResourceKind } from './ResourceSource';\n\nconst path = optionalRequire('path');\nconst fs = optionalRequire('fs');\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Ask Electron main process to open a window for the specified editor,\n * then wait for the editor to be closed and pass the results.\n */\nconst openAndWaitForExternalEditorWindow = async (\n  editorName: 'piskel' | 'yarn' | 'jfxr',\n  externalEditorInput: ExternalEditorInput\n): Promise<?ExternalEditorOutput> => {\n  if (!ipcRenderer) throw new Error('Not supported.');\n\n  const externalEditorOutput = await ipcRenderer.invoke(\n    `${editorName}-load`,\n    externalEditorInput\n  );\n  return externalEditorOutput;\n};\n\n/**\n * Download (or read locally) resources and prepare them to be edited\n * by an external editor.\n */\nexport const downloadAndPrepareExternalEditorBase64Resources = async ({\n  project,\n  resourceNames,\n}: {|\n  project: gdProject,\n  resourceNames: Array<string>,\n|}): Promise<Array<ExternalEditorBase64Resource>> => {\n  type ResourceToDownload = {|\n    resourceName: string,\n    url: string,\n  |};\n\n  type ResourceToReadLocally = {|\n    resourceName: string,\n    localFilePath: string,\n  |};\n\n  const projectPath = path.dirname(project.getProjectFile());\n  const urlsToDownload: Array<ResourceToDownload> = [];\n  const filesToRead: Array<ResourceToReadLocally> = [];\n  const resourcesManager = project.getResourcesManager();\n  resourceNames.forEach(resourceName => {\n    if (!resourcesManager.hasResource(resourceName)) return;\n\n    const resource = resourcesManager.getResource(resourceName);\n    const url = resource.getFile();\n    if (isURL(url)) {\n      if (isBlobURL(url)) {\n        console.error('Unsupported blob URL for a resource - ignoring it.');\n      } else {\n        urlsToDownload.push({\n          url,\n          resourceName,\n        });\n      }\n    } else {\n      // This resource is a local file.\n      filesToRead.push({\n        localFilePath: url,\n        resourceName,\n      });\n    }\n  });\n\n  const downloadedBlobs: Array<\n    ItemResult<ResourceToDownload>\n  > = await downloadUrlsToBlobs({\n    urlContainers: urlsToDownload,\n    onProgress: (count, total) => {},\n  });\n\n  const resourcesToDataUrl = new Map<\n    string,\n    {|\n      dataUrl: string,\n      localFilePath?: string,\n    |}\n  >();\n  await Promise.all(\n    downloadedBlobs.map(async ({ error, blob, item }) => {\n      if (blob) {\n        try {\n          resourcesToDataUrl.set(item.resourceName, {\n            dataUrl: await convertBlobToDataURL(blob),\n          });\n        } catch (error) {\n          console.error(\n            `Unable to read data from resource \"${\n              item.resourceName\n            }\" - ignoring it.`,\n            error\n          );\n        }\n      }\n    })\n  );\n  await Promise.all(\n    filesToRead.map(async ({ localFilePath, resourceName }) => {\n      try {\n        const content = await fs.promises.readFile(\n          path.resolve(projectPath, localFilePath)\n        );\n\n        resourcesToDataUrl.set(resourceName, {\n          localFilePath,\n          dataUrl: 'data:text/plain;base64,' + content.toString('base64'),\n        });\n      } catch (error) {\n        console.error(\n          `Unable to read local file \"${localFilePath}\" - ignoring it.`,\n          error\n        );\n      }\n    })\n  );\n\n  return resourceNames.map(resourceName => {\n    const resourceData = resourcesToDataUrl.get(resourceName);\n    if (!resourceData)\n      return {\n        name: resourceName,\n        dataUrl: '',\n      };\n\n    const { localFilePath, dataUrl } = resourceData;\n    return {\n      name: resourceName,\n      dataUrl,\n      localFilePath,\n    };\n  });\n};\n\n/**\n * Edit one or more resources with the specified external editor.\n */\nconst editWithLocalExternalEditor = async ({\n  externalEditorName,\n  defaultName,\n  metadataKey,\n  resourceKind,\n  options,\n}: {|\n  externalEditorName: 'piskel' | 'yarn' | 'jfxr',\n  defaultName: string,\n  metadataKey: string,\n  resourceKind: ResourceKind,\n  options: EditWithExternalEditorOptions,\n|}) => {\n  const { project, resourceNames, resourceManagementProps } = options;\n\n  // Fetch all edited resources as base64 encoded \"data urls\" (`data:...`).\n  const resources = await downloadAndPrepareExternalEditorBase64Resources({\n    project,\n    resourceNames,\n  });\n\n  // Open the external editor, passing the resources with the data urls.\n  const externalEditorInput: ExternalEditorInput = {\n    singleFrame: options.extraOptions.singleFrame,\n    externalEditorData: readMetadata(\n      metadataKey,\n      options.extraOptions.existingMetadata\n    ),\n    fps: options.extraOptions.fps,\n    isLooping: options.extraOptions.isLooping,\n    name: options.extraOptions.name || resourceNames[0] || defaultName,\n    resources,\n  };\n  sendExternalEditorOpened(externalEditorName);\n  const externalEditorOutput: ?ExternalEditorOutput = await openAndWaitForExternalEditorWindow(\n    externalEditorName,\n    externalEditorInput\n  );\n  if (!externalEditorOutput) return null; // Changes cancelled.\n\n  // Save the edited files back to the GDevelop resources, as \"blob urls\" (blob:...)\n  // which can then uploaded or saved locally.\n  const modifiedResources = await saveBlobUrlsFromExternalEditorBase64Resources(\n    {\n      baseNameForNewResources: externalEditorOutput.baseNameForNewResources,\n      project,\n      resources: externalEditorOutput.resources,\n      resourceKind,\n    }\n  );\n\n  // Ask the project to persist the resources (\"blob urls\" will be either uploaded\n  // or saved locally).\n  try {\n    await resourceManagementProps.onFetchNewlyAddedResources();\n  } catch (error) {\n    console.error(\n      'An error happened while fetching the newly added resources:',\n      error\n    );\n  }\n\n  // Free the \"blob urls\" so that blobs don't stay in memory! They are only temporarily\n  // useful while waiting for an upload/local file save.\n  freeBlobsAndUpdateMetadata({\n    modifiedResources,\n    metadataKey,\n    metadata: options.extraOptions.singleFrame\n      ? externalEditorOutput.externalEditorData\n      : null,\n  });\n\n  // Some editors (Piskel) need to have resource names persisted.\n  patchExternalEditorMetadataWithResourcesNamesIfNecessary(\n    modifiedResources.map(({ resource }) => resource.getName()),\n    externalEditorOutput.externalEditorData\n  );\n\n  return {\n    resources: modifiedResources.map(({ resource, originalIndex }) => ({\n      name: resource.getName(),\n      originalIndex,\n    })),\n    newName: externalEditorOutput.baseNameForNewResources,\n    newMetadata: { [metadataKey]: externalEditorOutput.externalEditorData },\n  };\n};\n\n/**\n * This is the list of editors that can be used to edit resources\n * on Electron runtime.\n */\nconst editors: Array<ResourceExternalEditor> = [\n  {\n    name: 'piskel-app',\n    createDisplayName: t`Create with Piskel`,\n    editDisplayName: t`Edit with Piskel`,\n    kind: 'image',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'piskel',\n        defaultName: 'New image',\n        metadataKey: 'pskl',\n        resourceKind: 'image',\n      });\n    },\n  },\n  {\n    name: 'Jfxr',\n    createDisplayName: t`Create with Jfxr`,\n    editDisplayName: t`Edit with Jfxr`,\n    kind: 'audio',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'jfxr',\n        defaultName: 'New sound effect',\n        metadataKey: 'jfxr',\n        resourceKind: 'audio',\n      });\n    },\n  },\n  {\n    name: 'Yarn',\n    createDisplayName: t`Create with Yarn`,\n    editDisplayName: t`Edit with Yarn`,\n    kind: 'json',\n    edit: async options => {\n      return await editWithLocalExternalEditor({\n        options,\n        externalEditorName: 'yarn',\n        defaultName: 'New dialogue tree',\n        metadataKey: 'yarn',\n        resourceKind: 'json',\n      });\n    },\n  },\n];\n\nexport default editors;\n","// @flow\nimport optionalRequire from './OptionalRequire';\nconst os = optionalRequire('os');\n\nexport const getUID = () => {\n  try {\n    return os.userInfo().uid;\n  } catch (e) {\n    return '';\n  }\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport { isURL } from '../../ResourcesList/ResourceUtils';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\n\nconst gd: libGDevelop = global.gd;\n\nexport type UrlFileDescriptor = {|\n  filePath: string,\n  url: string,\n|};\n\n// For some reason, `path.posix` is undefined when packaged\n// with webpack, so we're using `path` directly. As it's for the web-app,\n// it should always be the posix version. In tests on Windows,\n// it's necessary to use path.posix.\n// Search for \"pathPosix\" in the codebase for other places where this is used.\nconst pathPosix = path.posix || path;\n\n/**\n * Gives access to the local filesystem, but returns paths\n * that are using \"/\" as a path separator, even on Windows\n * (so that in exported games, paths are slashs, which is\n * supported everywhere).\n */\nclass LocalFileSystem {\n  /**\n   * True if URLs should be downloaded (useful for an export, but not for a preview).\n   * @private\n   */\n  _downloadUrlsToLocalFiles: boolean;\n\n  /**\n   * Store all the files that should be downloaded (filepath => url)\n   * @private\n   */\n  _filesToDownload: { [string]: string } = {};\n\n  constructor(\n    options: ?{|\n      downloadUrlsToLocalFiles: boolean,\n    |}\n  ) {\n    this._downloadUrlsToLocalFiles =\n      !!options && options.downloadUrlsToLocalFiles;\n  }\n\n  /**\n   * Returns all the files that should be downloaded from a URL, with the specified destination path prefix.\n   */\n  getAllUrlFilesIn = (pathPrefix: string): Array<UrlFileDescriptor> => {\n    // Ensure the path prefix we're searching the files in is normalized,\n    // because everything that we stored was normalized. If we don't do this,\n    // we risk missing files on Windows (as pathPrefix can contain backslashes).\n    const normalizedPathPrefix = pathPosix\n      .normalize(pathPrefix)\n      .replace(/\\\\/g, '/');\n\n    return Object.keys(this._filesToDownload)\n      .filter(filePath => filePath.indexOf(normalizedPathPrefix) === 0)\n      .map(filePath => ({\n        filePath,\n        url: this._filesToDownload[filePath],\n      }));\n  };\n\n  mkDir = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return;\n    }\n\n    try {\n      fs.mkdirsSync(path);\n    } catch (e) {\n      console.error('mkDir(' + path + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  dirExists = (path: string) => {\n    if (isURL(path)) {\n      // URLs are always assumed to exist.\n      return true;\n    }\n\n    return fs.existsSync(path);\n  };\n  clearDir = (path: string) => {\n    try {\n      fs.emptyDirSync(path);\n    } catch (e) {\n      console.error('clearDir(' + path + ') failed: ' + e);\n    }\n  };\n  getTempDir = () => {\n    return path.join(os.tmpdir(), `GDTMP-${getUID()}`);\n  };\n  fileNameFrom = (fullPath: string) => {\n    // If URLs are not downloaded, then filenames are not changed.\n    if (!this._downloadUrlsToLocalFiles && isURL(fullPath)) return fullPath;\n\n    return path.basename(fullPath);\n  };\n  dirNameFrom = (fullPath: string) => {\n    return path.dirname(fullPath).replace(/\\\\/g, '/');\n  };\n  makeAbsolute = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    if (!this.isAbsolute(baseDirectory))\n      baseDirectory = path.resolve(baseDirectory);\n\n    return path\n      .resolve(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  makeRelative = (filename: string, baseDirectory: string) => {\n    if (isURL(filename)) return filename;\n\n    return path\n      .relative(baseDirectory, path.normalize(filename))\n      .replace(/\\\\/g, '/');\n  };\n  isAbsolute = (fullPath: string) => {\n    if (isURL(fullPath)) return true;\n\n    if (fullPath.length === 0) return true;\n    return (\n      (fullPath.length > 0 && fullPath.charAt(0) === '/') ||\n      (fullPath.length > 1 && fullPath.charAt(1) === ':')\n    );\n  };\n  copyFile = (source: string, dest: string) => {\n    if (isURL(source)) {\n      // If URLs are not downloaded, then there is nothing to copy.\n      if (!this._downloadUrlsToLocalFiles) return true;\n\n      if (isURL(dest)) {\n        console.error(\n          `Destination can't be a URL in copyFile (from ${source} to ${dest}).`\n        );\n        return false;\n      }\n\n      this._filesToDownload[pathPosix.normalize(dest)] = source;\n      return true;\n    }\n\n    try {\n      if (source !== dest) fs.copySync(source, dest);\n    } catch (e) {\n      console.error('copyFile(' + source + ', ' + dest + ') failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  writeToFile = (file: string, contents: string) => {\n    try {\n      fs.outputFileSync(file, contents);\n    } catch (e) {\n      console.error('writeToFile(' + file + ', ...) failed: ' + e);\n      return false;\n    }\n    return true;\n  };\n  readFile = (file: string) => {\n    try {\n      var contents = fs.readFileSync(file);\n      return contents.toString();\n    } catch (e) {\n      console.error('readFile(' + file + ') failed: ' + e);\n      return '';\n    }\n  };\n  readDir = (path: string, ext: string) => {\n    ext = ext.toUpperCase();\n    var output = new gd.VectorString();\n    try {\n      var files = [];\n      if (fs.existsSync(path)) {\n        files = fs.readdirSync(path);\n        files.forEach(function(file) {\n          if (\n            ext.length === 0 ||\n            file.toUpperCase().indexOf(ext, file.length - ext.length) !== -1\n          ) {\n            output.push_back(path + '/' + file);\n          }\n        });\n      }\n    } catch (e) {\n      console.error('readDir(' + path + ',' + ext + ') failed: ' + e);\n    }\n\n    return output;\n  };\n  fileExists = (filePath: string) => {\n    // Check if a file WILL exists once downloaded.\n    const normalizedFilePath = pathPosix.normalize(filePath);\n    const shouldTheFileBeDownloaded = !!this._filesToDownload[\n      normalizedFilePath\n    ];\n    if (shouldTheFileBeDownloaded) {\n      return true;\n    }\n\n    // Check if a local file exists.\n    try {\n      const stat = fs.statSync(filePath);\n      return stat.isFile();\n    } catch (e) {\n      return false;\n    }\n  };\n}\n\nexport default LocalFileSystem;\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport Dialog from '../../../UI/Dialog';\nimport FlatButton from '../../../UI/FlatButton';\nimport Text from '../../../UI/Text';\nimport { Line } from '../../../UI/Grid';\nimport PlaceholderLoader from '../../../UI/PlaceholderLoader';\nimport ShareLink from '../../../UI/ShareDialog/ShareLink';\nimport QrCode from '../../../UI/QrCode';\nimport { useResponsiveWindowSize } from '../../../UI/Responsive/ResponsiveWindowMeasurer';\n\ntype Props = {|\n  open: boolean,\n  /**\n   * url without protocol, for example '192.168.1.16:2929'\n   */\n  url: ?string,\n  onClose: () => void,\n  onExport: ?() => void,\n  onRunPreviewLocally: () => void,\n  error: ?any,\n|};\n\nconst LocalNetworkPreviewDialog = ({\n  url,\n  open,\n  error,\n  onExport,\n  onClose,\n  onRunPreviewLocally,\n}: Props) => {\n  const { isMobile } = useResponsiveWindowSize();\n  if (!open) return null;\n  const urlWithProtocol = url ? `http://${url}` : null;\n\n  return (\n    <Dialog\n      title={<Trans>Preview</Trans>}\n      actions={[\n        <FlatButton\n          key=\"close\"\n          label={<Trans>Close</Trans>}\n          primary\n          onClick={onClose}\n        />,\n      ]}\n      secondaryActions={[\n        onExport && (\n          <FlatButton\n            key=\"export\"\n            label={<Trans>Export game</Trans>}\n            onClick={onExport}\n          />\n        ),\n        <FlatButton\n          key=\"run-preview-locally\"\n          label={<Trans>Run on this computer</Trans>}\n          onClick={onRunPreviewLocally}\n        />,\n      ]}\n      open={open}\n      onRequestClose={onClose}\n      maxWidth=\"sm\"\n    >\n      {error && (\n        <Line>\n          <Text>\n            <Trans>\n              Unable to start the server for the preview! Make sure that you are\n              authorized to run servers on this computer. Otherwise, use classic\n              preview to test your game.\n            </Trans>\n          </Text>\n        </Line>\n      )}\n      {!error && !urlWithProtocol && <PlaceholderLoader />}\n      {!error && urlWithProtocol && (\n        <div>\n          <Line>\n            <Text>\n              <Trans>\n                Your preview is ready! On your mobile or tablet, open your\n                browser and enter in the address bar:\n              </Trans>\n            </Text>\n          </Line>\n          <ShareLink url={urlWithProtocol} />\n          {urlWithProtocol && (\n            <>\n              <Line>\n                <Text>\n                  <Trans>Or flash this QR code:</Trans>\n                </Text>\n              </Line>\n              <Line justifyContent=\"center\">\n                <QrCode url={urlWithProtocol} size={isMobile ? 100 : 150} />\n              </Line>\n            </>\n          )}\n          <Line>\n            <Text>\n              <Trans>\n                Please note that your device should be connected on the same\n                network as this computer.\n              </Trans>\n            </Text>\n          </Line>\n        </div>\n      )}\n    </Dialog>\n  );\n};\n\nexport default LocalNetworkPreviewDialog;\n","// @flow\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport {\n  type PreviewDebuggerServerCallbacks,\n  type PreviewDebuggerServer,\n  type DebuggerId,\n  type ServerAddress,\n} from '../../PreviewLauncher.flow';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nlet debuggerServerState: 'started' | 'stopped' = 'stopped';\nlet debuggerServerAddress: ?ServerAddress = null;\nconst callbacksList: Array<PreviewDebuggerServerCallbacks> = [];\nconst debuggerIds: Array<DebuggerId> = [];\n\nconst removeServerListeners = () => {\n  if (!ipcRenderer) return;\n\n  ipcRenderer.removeAllListeners('debugger-send-message-done');\n  ipcRenderer.removeAllListeners('debugger-error-received');\n  ipcRenderer.removeAllListeners('debugger-connection-closed');\n  ipcRenderer.removeAllListeners('debugger-connection-opened');\n  ipcRenderer.removeAllListeners('debugger-connection-errored');\n  ipcRenderer.removeAllListeners('debugger-start-server-done');\n  ipcRenderer.removeAllListeners('debugger-message-received');\n};\n\n/**\n * A debugger server implemented using Electron (this one is just a bridge to it,\n * communicating through events with it).\n */\nexport const localPreviewDebuggerServer: PreviewDebuggerServer = {\n  startServer: () => {\n    if (!ipcRenderer) return Promise.reject();\n    if (debuggerServerState === 'started') return Promise.resolve();\n\n    const serverStartPromise = new Promise((resolve, reject) => {\n      let serverStartPromiseCompleted = false;\n      debuggerServerState = 'stopped';\n      debuggerServerAddress = null;\n      removeServerListeners();\n\n      ipcRenderer.on('debugger-error-received', (event, err) => {\n        if (!serverStartPromiseCompleted) {\n          reject(err);\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onErrorReceived }) => onErrorReceived(err));\n      });\n\n      ipcRenderer.on('debugger-connection-closed', (event, { id }) => {\n        const debuggerIdIndex = debuggerIds.indexOf(id);\n        if (debuggerIdIndex !== -1) debuggerIds.splice(debuggerIdIndex, 1);\n\n        callbacksList.forEach(({ onConnectionClosed }) =>\n          onConnectionClosed({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on('debugger-connection-opened', (event, { id }) => {\n        debuggerIds.push(id);\n        callbacksList.forEach(({ onConnectionOpened }) =>\n          onConnectionOpened({\n            id,\n            debuggerIds,\n          })\n        );\n      });\n\n      ipcRenderer.on(\n        'debugger-connection-errored',\n        (event, { id, errorMessage }) => {\n          callbacksList.forEach(({ onConnectionErrored }) =>\n            onConnectionErrored({\n              id,\n              errorMessage,\n            })\n          );\n        }\n      );\n\n      ipcRenderer.on('debugger-start-server-done', (event, { address }) => {\n        console.info('Local preview debugger started');\n        debuggerServerState = 'started';\n        debuggerServerAddress = address;\n        if (!serverStartPromiseCompleted) {\n          resolve();\n          serverStartPromiseCompleted = true;\n        }\n\n        callbacksList.forEach(({ onServerStateChanged }) =>\n          onServerStateChanged()\n        );\n      });\n\n      ipcRenderer.on('debugger-message-received', (event, { id, message }) => {\n        console.info('Processing message received for debugger');\n        try {\n          const parsedMessage = JSON.parse(message);\n          callbacksList.forEach(({ onHandleParsedMessage }) =>\n            onHandleParsedMessage({ id, parsedMessage })\n          );\n        } catch (e) {\n          console.warn(\n            'Error while parsing message received from debugger client:',\n            e\n          );\n        }\n      });\n      ipcRenderer.send('debugger-start-server');\n    });\n\n    // Consider the start of the server as a failure if not completed/errored\n    // after 5s.\n    const serverStartTimeoutPromise = new Promise((resolve, reject) => {\n      setTimeout(() => {\n        reject(\n          new Error(\n            'Debugger server not started or errored after 5s - aborting.'\n          )\n        );\n      }, 5000);\n    });\n    return Promise.race([serverStartPromise, serverStartTimeoutPromise]);\n  },\n  sendMessage: (id: DebuggerId, message: Object) => {\n    if (!ipcRenderer) return;\n    if (debuggerServerState === 'stopped') {\n      console.error('Cannot send message when debugger server is stopped.');\n      return;\n    }\n\n    ipcRenderer.send('debugger-send-message', {\n      id,\n      message: JSON.stringify(message),\n    });\n  },\n  getServerState: () => debuggerServerState,\n  getExistingDebuggerIds: () => debuggerIds,\n  registerCallbacks: (callbacks: PreviewDebuggerServerCallbacks) => {\n    callbacksList.push(callbacks);\n\n    return () => {\n      const callbacksIndex = callbacksList.indexOf(callbacks);\n      if (callbacksIndex !== -1) callbacksList.splice(callbacksIndex, 1);\n    };\n  },\n};\n\nexport const getDebuggerServerAddress = (): ?ServerAddress =>\n  debuggerServerAddress;\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport * as React from 'react';\nimport LocalFileSystem from '../LocalFileSystem';\nimport optionalRequire from '../../../Utils/OptionalRequire';\nimport { timeFunction } from '../../../Utils/TimeFunction';\nimport { findGDJS } from '../../../GameEngineFinder/LocalGDJSFinder';\nimport LocalNetworkPreviewDialog from './LocalNetworkPreviewDialog';\nimport assignIn from 'lodash/assignIn';\nimport { type PreviewOptions } from '../../PreviewLauncher.flow';\nimport SubscriptionChecker, {\n  type SubscriptionCheckerInterface,\n} from '../../../Profile/Subscription/SubscriptionChecker';\nimport {\n  getDebuggerServerAddress,\n  localPreviewDebuggerServer,\n} from './LocalPreviewDebuggerServer';\nimport Window from '../../../Utils/Window';\nconst electron = optionalRequire('electron');\nconst path = optionalRequire('path');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst gd: libGDevelop = global.gd;\n\ntype Props = {|\n  getIncludeFileHashs: () => { [string]: number },\n  onExport?: () => void,\n|};\n\ntype State = {|\n  networkPreviewDialogOpen: boolean,\n  networkPreviewHost: ?string,\n  networkPreviewPort: ?number,\n  networkPreviewError: ?any,\n  hotReloadsCount: number,\n  previewGamePath: ?string,\n  previewBrowserWindowOptions: ?{\n    width: number,\n    height: number,\n    useContentSize: boolean,\n    title: string,\n    backgroundColor: string,\n  },\n  hideMenuBar: boolean,\n  alwaysOnTop: boolean,\n  numberOfWindows: number,\n|};\n\nexport default class LocalPreviewLauncher extends React.Component<\n  Props,\n  State\n> {\n  canDoNetworkPreview = () => true;\n  canDoHotReload = () => true;\n\n  state = {\n    networkPreviewDialogOpen: false,\n    networkPreviewHost: null,\n    networkPreviewPort: null,\n    networkPreviewError: null,\n    previewGamePath: null,\n    previewBrowserWindowOptions: null,\n    hotReloadsCount: 0,\n    hideMenuBar: true,\n    alwaysOnTop: true,\n    numberOfWindows: 1,\n  };\n  _networkPreviewSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n  _hotReloadSubscriptionChecker: ?SubscriptionCheckerInterface = null;\n\n  _openPreviewBrowserWindow = () => {\n    const { previewGamePath, previewBrowserWindowOptions } = this.state;\n    if (!previewBrowserWindowOptions || !previewGamePath) return;\n\n    if (!ipcRenderer) return;\n\n    ipcRenderer.invoke('preview-open', {\n      previewBrowserWindowOptions,\n      previewGameIndexHtmlPath: `file://${previewGamePath}/index.html`,\n      alwaysOnTop: this.state.alwaysOnTop,\n      hideMenuBar: this.state.hideMenuBar,\n      numberOfWindows: this.state.numberOfWindows,\n    });\n  };\n\n  closePreview = (windowId: number) => {\n    if (!ipcRenderer) return;\n    ipcRenderer.invoke('preview-close', { windowId });\n  };\n\n  _openPreviewWindow = (\n    project: gdProject,\n    gamePath: string,\n    options: PreviewOptions\n  ): void => {\n    this.setState(\n      {\n        previewBrowserWindowOptions: {\n          width: project.getGameResolutionWidth(),\n          height: project.getGameResolutionHeight(),\n          useContentSize: true,\n          title: `Preview of ${project.getName()}`,\n          backgroundColor: '#000000',\n          webPreferences: {\n            webSecurity: false, // Allow to access to local files,\n            // Allow Node.js API access in renderer process, as long\n            // as we've not removed dependency on it and on \"@electron/remote\".\n            nodeIntegration: true,\n            contextIsolation: false,\n          },\n        },\n        previewGamePath: gamePath,\n        hideMenuBar: !options.getIsMenuBarHiddenInPreview(),\n        alwaysOnTop: options.getIsAlwaysOnTopInPreview(),\n        numberOfWindows: options.numberOfWindows,\n      },\n      () => {\n        if (!options.networkPreview) {\n          this._openPreviewBrowserWindow();\n        } else {\n          if (!ipcRenderer) return;\n\n          ipcRenderer.removeAllListeners('serve-folder-done');\n          ipcRenderer.removeAllListeners('local-network-ips');\n          ipcRenderer.on('serve-folder-done', (event, err, serverParams) => {\n            if (err) {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: null,\n                networkPreviewHost: null,\n                networkPreviewError: err,\n              });\n            } else {\n              this.setState({\n                networkPreviewDialogOpen: true,\n                networkPreviewPort: serverParams.port,\n              });\n            }\n\n            setTimeout(() => this._checkSubscriptionForNetworkPreview());\n          });\n          ipcRenderer.on('local-network-ip', (event, ipAddress) => {\n            this.setState({\n              networkPreviewHost: ipAddress,\n            });\n          });\n          ipcRenderer.send('serve-folder', {\n            root: gamePath,\n          });\n          ipcRenderer.send('get-local-network-ip');\n        }\n      }\n    );\n  };\n\n  _prepareExporter = (): Promise<{|\n    outputDir: string,\n    exporter: gdjsExporter,\n    gdjsRoot: string,\n  |}> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: false,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const outputDir = path.join(fileSystem.getTempDir(), 'preview');\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        outputDir,\n        exporter,\n        gdjsRoot,\n      };\n    });\n  };\n\n  launchPreview = (previewOptions: PreviewOptions): Promise<any> => {\n    const { project, layout, externalLayout } = previewOptions;\n\n    // Start the debugger server for previews. Even if not used,\n    // useful if the user opens the Debugger editor later, or want to\n    // hot reload.\n    return this.getPreviewDebuggerServer()\n      .startServer()\n      .catch(err => {\n        // Ignore any error when running the debugger server - the preview\n        // can still work without it.\n        console.error(\n          'Unable to start the Debugger Server for the preview:',\n          err\n        );\n      })\n      .then(() => this._prepareExporter())\n      .then(({ outputDir, exporter, gdjsRoot }) => {\n        timeFunction(\n          () => {\n            const previewExportOptions = new gd.PreviewExportOptions(\n              project,\n              outputDir\n            );\n            previewExportOptions.setIsDevelopmentEnvironment(Window.isDev());\n            previewExportOptions.setLayoutName(layout.getName());\n            if (externalLayout) {\n              previewExportOptions.setExternalLayoutName(\n                externalLayout.getName()\n              );\n            }\n\n            const previewDebuggerServerAddress = getDebuggerServerAddress();\n            if (previewDebuggerServerAddress) {\n              previewExportOptions.useWebsocketDebuggerClientWithServerAddress(\n                previewDebuggerServerAddress.address,\n                '' + previewDebuggerServerAddress.port\n              );\n            }\n\n            const includeFileHashs = this.props.getIncludeFileHashs();\n            for (const includeFile in includeFileHashs) {\n              const hash = includeFileHashs[includeFile];\n              previewExportOptions.setIncludeFileHash(includeFile, hash);\n            }\n\n            // Give the preview the path to the \"@electron/remote\" module of the editor,\n            // as this is required by some features and we've not removed dependency\n            // on \"@electron/remote\" yet.\n            previewExportOptions.setElectronRemoteRequirePath(\n              path.join(\n                gdjsRoot,\n                '../preview_node_modules',\n                '@electron/remote',\n                'renderer/index.js'\n              )\n            );\n\n            const debuggerIds = this.getPreviewDebuggerServer().getExistingDebuggerIds();\n            const shouldHotReload =\n              previewOptions.hotReload && !!debuggerIds.length;\n\n            previewExportOptions.setProjectDataOnlyExport(\n              // Only export project data if asked and if a hot-reloading is being done.\n              shouldHotReload && previewOptions.projectDataOnlyExport\n            );\n\n            previewExportOptions.setFullLoadingScreen(\n              previewOptions.fullLoadingScreen\n            );\n\n            if (previewOptions.fallbackAuthor) {\n              previewExportOptions.setFallbackAuthor(\n                previewOptions.fallbackAuthor.id,\n                previewOptions.fallbackAuthor.username\n              );\n            }\n\n            exporter.exportProjectForPixiPreview(previewExportOptions);\n            previewExportOptions.delete();\n            exporter.delete();\n\n            if (shouldHotReload) {\n              debuggerIds.forEach(debuggerId => {\n                this.getPreviewDebuggerServer().sendMessage(debuggerId, {\n                  command: 'hotReload',\n                });\n              });\n\n              if (\n                this.state.hotReloadsCount % 16 === 0 &&\n                this._hotReloadSubscriptionChecker\n              ) {\n                this._hotReloadSubscriptionChecker.checkUserHasSubscription();\n              }\n              this.setState(state => ({\n                hotReloadsCount: state.hotReloadsCount + 1,\n              }));\n            } else {\n              this._openPreviewWindow(project, outputDir, previewOptions);\n            }\n          },\n          time => console.info(`Preview took ${time}ms`)\n        );\n      });\n  };\n\n  getPreviewDebuggerServer() {\n    return localPreviewDebuggerServer;\n  }\n\n  _checkSubscriptionForNetworkPreview = () => {\n    if (!this._networkPreviewSubscriptionChecker) return true;\n\n    return this._networkPreviewSubscriptionChecker.checkUserHasSubscription();\n  };\n\n  render() {\n    const {\n      networkPreviewDialogOpen,\n      networkPreviewHost,\n      networkPreviewPort,\n      networkPreviewError,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._networkPreviewSubscriptionChecker = subscriptionChecker)\n          }\n          onChangeSubscription={() =>\n            this.setState({ networkPreviewDialogOpen: false })\n          }\n          id=\"Preview over wifi\"\n          title={<Trans>Preview over wifi</Trans>}\n          mode=\"try\"\n        />\n        <SubscriptionChecker\n          ref={subscriptionChecker =>\n            (this._hotReloadSubscriptionChecker = subscriptionChecker)\n          }\n          id=\"Hot reloading\"\n          title={\n            <Trans>Live preview (apply changes to the running preview)</Trans>\n          }\n          mode=\"try\"\n        />\n        <LocalNetworkPreviewDialog\n          open={networkPreviewDialogOpen}\n          url={\n            networkPreviewHost && networkPreviewPort\n              ? `${networkPreviewHost}:${networkPreviewPort}`\n              : null\n          }\n          error={networkPreviewError}\n          onClose={() => this.setState({ networkPreviewDialogOpen: false })}\n          onExport={this.props.onExport}\n          onRunPreviewLocally={this._openPreviewBrowserWindow}\n        />\n      </React.Fragment>\n    );\n  }\n}\n","// @flow\n\nexport const timeFunction = (fn: Function, onResult: number => void) => {\n  var t0 = performance.now();\n  fn();\n  var t1 = performance.now();\n  onResult(t1 - t0);\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportFlowProps,\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n  ExportFlow,\n} from '../GenericExporters/CordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nconst exportPipelineName = 'local-cordova';\n\nexport const localCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: exportPipelineName,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState, exportStep }) =>\n    exportStep !== 'done' ? (\n      <Column noMargin>\n        <Line>\n          <Column noMargin>\n            <ExplanationHeader />\n          </Column>\n        </Line>\n        <Line>\n          <LocalFolderPicker\n            type=\"export\"\n            value={exportState.outputDir}\n            defaultPath={project.getLastCompilationDirectory()}\n            onChange={outputDir => {\n              updateExportState(() => ({ outputDir }));\n              project.setLastCompilationDirectory(outputDir);\n            }}\n            fullWidth\n          />\n        </Line>\n      </Column>\n    ) : null,\n\n  renderExportFlow: (props: ExportFlowProps) => (\n    <ExportFlow {...props} exportPipelineName={exportPipelineName} />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    exportOptions.setTarget('cordova');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportFlowProps,\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n  ExportFlow,\n} from '../GenericExporters/ElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nconst exportPipelineName = 'local-electron';\n\nexport const localElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: exportPipelineName,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState, exportStep }) =>\n    exportStep !== 'done' ? (\n      <Column noMargin expand>\n        <Line>\n          <Column noMargin>\n            <ExplanationHeader />\n          </Column>\n        </Line>\n        <Line>\n          <LocalFolderPicker\n            type=\"export\"\n            value={exportState.outputDir}\n            defaultPath={project.getLastCompilationDirectory()}\n            onChange={outputDir => {\n              updateExportState(() => ({ outputDir }));\n              project.setLastCompilationDirectory(outputDir);\n            }}\n            fullWidth\n          />\n        </Line>\n      </Column>\n    ) : null,\n\n  renderExportFlow: (props: ExportFlowProps) => (\n    <ExportFlow {...props} exportPipelineName={exportPipelineName} />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    exportOptions.setTarget('electron');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type ExportFlowProps,\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n  ExportFlow,\n} from '../GenericExporters/HTML5Export';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nimport DismissableTutorialMessage from '../../Hints/DismissableTutorialMessage';\n\nconst electron = optionalRequire('electron');\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  outputDir: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n|};\n\ntype ExportOutput = {|\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = null;\n\ntype CompressionOutput = null;\n\nconst exportPipelineName = 'local-html5';\n\nexport const localHTML5ExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: exportPipelineName,\n\n  getInitialExportState: (project: gdProject) => ({\n    outputDir: project.getLastCompilationDirectory(),\n  }),\n\n  canLaunchBuild: exportState => !!exportState.outputDir,\n\n  isNavigationDisabled: () => false,\n\n  renderTutorial: () => (\n    <DismissableTutorialMessage tutorialId=\"export-to-itch\" />\n  ),\n\n  renderHeader: ({ project, exportState, updateExportState, exportStep }) =>\n    exportStep !== 'done' ? (\n      <Column noMargin expand>\n        <Line>\n          <ExplanationHeader />\n        </Line>\n        <Line>\n          <LocalFolderPicker\n            type=\"export\"\n            value={exportState.outputDir}\n            defaultPath={project.getLastCompilationDirectory()}\n            onChange={outputDir => {\n              updateExportState(() => ({ outputDir }));\n              project.setLastCompilationDirectory(outputDir);\n            }}\n            fullWidth\n          />\n        </Line>\n      </Column>\n    ) : null,\n\n  renderExportFlow: (props: ExportFlowProps) => (\n    <ExportFlow {...props} exportPipelineName={exportPipelineName} />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n\n      return {\n        exporter,\n        localFileSystem,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      context.exportState.outputDir\n    );\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      urlFiles: localFileSystem.getAllUrlFilesIn(context.exportState.outputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return null;\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    exportOutput: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return Promise.resolve(null);\n  },\n\n  renderDoneFooter: ({ exportState }) => {\n    const openExportFolder = () => {\n      if (shell) shell.openPath(exportState.outputDir);\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            primary\n            onClick={() => openExportFolder()}\n            label={<Trans>Open the exported game folder</Trans>}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\nimport { t } from '@lingui/macro';\n\nimport * as React from 'react';\nimport TextField from '../TextField';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport FlatButton from '../FlatButton';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst styles = {\n  container: {\n    position: 'relative',\n    display: 'flex',\n    alignItems: 'baseline',\n  },\n  button: {\n    marginLeft: 10,\n  },\n  textField: {\n    flex: 1,\n  },\n};\n\ntype Props = {|\n  value: string,\n  onChange: string => void,\n  title: string,\n  message: string,\n  defaultPath?: string,\n  fullWidth?: boolean,\n  filters: Array<{\n    name: string,\n    extensions: Array<string>,\n  }>,\n|};\n\nconst LocalFilePicker = ({\n  value,\n  onChange,\n  title,\n  message,\n  defaultPath,\n  fullWidth,\n  filters,\n}: Props) => {\n  const onChooseFolder = async () => {\n    if (!dialog || !electron) return;\n\n    const browserWindow = remote.getCurrentWindow();\n    const { filePath } = await dialog.showSaveDialog(browserWindow, {\n      title: title,\n      filters: filters,\n      message: message,\n      defaultPath: defaultPath,\n    });\n    onChange(filePath || '');\n  };\n\n  return (\n    <div\n      style={{\n        ...styles.container,\n        width: fullWidth ? '100%' : undefined,\n      }}\n    >\n      <TextField\n        margin=\"dense\"\n        style={styles.textField}\n        type=\"text\"\n        translatableHintText={t`Choose a file`}\n        value={value}\n        onChange={(event, value) => onChange(value)}\n      />\n      <FlatButton\n        label={<Trans>Choose</Trans>}\n        style={styles.button}\n        onClick={onChooseFolder}\n      />\n    </div>\n  );\n};\n\nexport default LocalFilePicker;\n","//@flow\nimport optionalRequire from './OptionalRequire';\n\n/**\n * Return a function that will load, only when called, the specified module name.\n *\n * As `optionalRequire`, this allows to require a Node.js/npm module without having it bundled by webpack.\n * This means that this module will only be available when running on Electron or Node.js.\n * When running without Electron or Node.js, `null` will be returned.\n */\nexport default function optionalLazyRequire(moduleName: string) {\n  let moduleLoaded = false;\n  let module = undefined;\n  return (): ?any => {\n    if (moduleLoaded) {\n      return module;\n    }\n\n    console.info(`Lazy loading ${moduleName}...`);\n    module = optionalRequire(moduleName);\n    moduleLoaded = true;\n    return module;\n  };\n}\n","// @flow\n\nimport optionalRequire from './OptionalRequire';\nimport optionalLazyRequire from '../Utils/OptionalLazyRequire';\nconst fs = optionalRequire('fs');\nconst lazyRequireArchiver = optionalLazyRequire('archiver');\n\n// TODO: Move in a Archiver folder?\n/**\n * Archive the given folder to a file. Only available when running on Electron runtime.\n */\nexport const archiveLocalFolder = ({\n  path,\n  outputFilename,\n  sizeLimit,\n}: {|\n  path: string,\n  outputFilename: string,\n  sizeLimit?: number,\n|}): Promise<string> => {\n  const archiver = lazyRequireArchiver();\n  return new Promise((resolve, reject) => {\n    if (!fs || !archiver) return reject(new Error('Archiver unavailable'));\n\n    const output = fs.createWriteStream(outputFilename);\n    const archive = archiver('zip', {\n      zlib: { level: 9 }, // Sets the compression level.\n    });\n\n    output.on('close', () => {\n      const fileSize = archive.pointer();\n      console.log(\n        `Archive written at ${outputFilename}, ${fileSize} total bytes.`\n      );\n      if (sizeLimit && fileSize > sizeLimit) {\n        const roundFileSizeInMb = Math.round(fileSize / (1000 * 1000));\n        reject(\n          new Error(\n            `Archive is of size ${roundFileSizeInMb} MB, which is above the limit allowed of ${sizeLimit /\n              (1000 * 1000)} MB.`\n          )\n        );\n      }\n      resolve(outputFilename);\n    });\n\n    archive.on('error', err => {\n      reject(err);\n    });\n\n    archive.pipe(output);\n\n    archive.directory(path, false);\n\n    archive.finalize();\n  });\n};\n","// @flow\nimport { Trans } from '@lingui/macro';\n\nimport React from 'react';\nimport RaisedButton from '../../UI/RaisedButton';\nimport { Column, Line } from '../../UI/Grid';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  type ExportFlowProps,\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport LocalFilePicker from '../../UI/LocalFilePicker';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport {\n  ExplanationHeader,\n  DoneFooter,\n  ExportFlow,\n} from '../GenericExporters/FacebookInstantGamesExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\n\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst shell = electron ? electron.shell : null;\n\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = {\n  archiveOutputFilename: string,\n};\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nconst exportPipelineName = 'local-facebook-instant-games';\n\nexport const localFacebookInstantGamesExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: exportPipelineName,\n\n  getInitialExportState: (project: gdProject) => ({\n    archiveOutputFilename: app\n      ? path.join(app.getPath('documents'), 'fb-instant-game.zip')\n      : '',\n  }),\n\n  canLaunchBuild: exportState => !!exportState.archiveOutputFilename,\n\n  isNavigationDisabled: () => false,\n\n  renderHeader: ({ project, exportState, updateExportState, exportStep }) =>\n    exportStep !== 'done' ? (\n      <Column noMargin expand>\n        <Line>\n          <ExplanationHeader />\n        </Line>\n        <Line>\n          <LocalFilePicker\n            title={'Facebook Instant Games export zip file'}\n            message={\n              'Choose where to save the exported file for Facebook Instant Games'\n            }\n            filters={[\n              {\n                name: 'Compressed file for Facebook Instant Games',\n                extensions: ['zip'],\n              },\n            ]}\n            value={exportState.archiveOutputFilename}\n            defaultPath={app ? app.getPath('documents') : ''}\n            onChange={value =>\n              updateExportState(() => ({ archiveOutputFilename: value }))\n            }\n            fullWidth\n          />\n        </Line>\n      </Column>\n    ) : null,\n\n  renderExportFlow: (props: ExportFlowProps) => (\n    <ExportFlow {...props} exportPipelineName={exportPipelineName} />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      // TODO: Memory leak? Check for other exporters too.\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'FacebookInstantGamesExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('facebookInstantGames');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: context.exportState.archiveOutputFilename,\n    });\n  },\n\n  renderDoneFooter: ({ exportState }) => {\n    const openExportFolder = () => {\n      if (shell && path)\n        shell.openPath(path.dirname(exportState.archiveOutputFilename));\n    };\n\n    return (\n      <DoneFooter\n        renderGameButton={() => (\n          <RaisedButton\n            key=\"open\"\n            label={<Trans>Open folder</Trans>}\n            primary={true}\n            onClick={openExportFolder}\n          />\n        )}\n      />\n    );\n  },\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\ntype UploadOptions = {\n  signedUrl: string,\n  contentType: string,\n};\n\nexport const uploadLocalFile = (\n  localFilePath: string,\n  uploadOptions: UploadOptions,\n  onProgress: (progress: number, total: number) => void\n): Promise<void> => {\n  if (!ipcRenderer) return Promise.reject('No support for local file upload');\n\n  ipcRenderer.removeAllListeners('local-file-upload-progress');\n  ipcRenderer.removeAllListeners('local-file-upload-done');\n\n  return new Promise((resolve, reject) => {\n    ipcRenderer.on(\n      'local-file-upload-progress',\n      (event, stepCurrentProgress, stepMaxProgress) => {\n        onProgress(stepCurrentProgress, stepMaxProgress);\n      }\n    );\n    ipcRenderer.on('local-file-upload-done', (event, err) => {\n      if (err) return reject(err);\n      resolve();\n    });\n    ipcRenderer.send('local-file-upload', localFilePath, uploadOptions);\n  });\n};\n","// @flow\nimport * as React from 'react';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaAndroid,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportFlowProps,\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n  ExportFlow,\n} from '../GenericExporters/OnlineCordovaExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\n\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nconst exportPipelineName = 'local-online-cordova';\n\nexport const localOnlineCordovaExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: exportPipelineName,\n  onlineBuildType: 'cordova-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['androidApk'],\n    keystore: 'new',\n    signingDialogOpen: false,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '',\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  shouldSuggestBumpingVersionNumber: () => true,\n\n  renderExportFlow: (props: ExportFlowProps) => (\n    <ExportFlow {...props} exportPipelineName={exportPipelineName} />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('cordova');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |},\n    payWithCredits: boolean\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildCordovaAndroid(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.keystore,\n      gameId,\n      options,\n      payWithCredits\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildCordovaIos,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportFlowProps,\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n  ExportFlow,\n} from '../GenericExporters/OnlineCordovaIosExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\n\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nconst exportPipelineName = 'local-online-cordova-ios';\n\nexport const localOnlineCordovaIosExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: exportPipelineName,\n  onlineBuildType: 'cordova-ios-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'mobile',\n\n  getInitialExportState: () => ({\n    targets: ['iosAppStore'],\n    signing: null,\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    (errored || exportStep === '') && !!exportState.signing,\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  shouldSuggestBumpingVersionNumber: () => true,\n\n  renderExportFlow: (props: ExportFlowProps) => (\n    <ExportFlow {...props} exportPipelineName={exportPipelineName} />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineCordovaExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('cordova');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |},\n    payWithCredits: boolean\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, profile } = authenticatedUser;\n    if (!profile) return Promise.reject(new Error('User is not authenticated'));\n    if (!exportState.signing)\n      return Promise.reject(new Error('Signing options not set up'));\n\n    return buildCordovaIos(\n      getAuthorizationHeader,\n      profile.id,\n      uploadBucketKey,\n      exportState.targets,\n      exportState.signing,\n      gameId,\n      options,\n      payWithCredits\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildElectron,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportFlowProps,\n  type ExportPipeline,\n  type ExportPipelineContext,\n} from '../ExportPipeline.flow';\nimport {\n  type ExportState,\n  SetupExportHeader,\n  ExportFlow,\n} from '../GenericExporters/OnlineElectronExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\n\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nconst exportPipelineName = 'local-online-electron';\n\nexport const localOnlineElectronExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: exportPipelineName,\n  onlineBuildType: 'electron-build',\n  limitedBuilds: true,\n  packageNameWarningType: 'desktop',\n\n  getInitialExportState: () => ({\n    targets: ['winExe'],\n  }),\n\n  // Build can be launched only if just opened the dialog or build errored.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    !!exportState.targets.length && (errored || exportStep === ''),\n\n  // Navigation is enabled when the build is errored or whilst uploading.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored &&\n    ['register', 'export', 'resources-download', 'compress', 'upload'].includes(\n      exportStep\n    ),\n\n  renderHeader: props => <SetupExportHeader {...props} />,\n\n  renderExportFlow: (props: ExportFlowProps) => (\n    <ExportFlow {...props} exportPipelineName={exportPipelineName} />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineElectronExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    exportOptions.setTarget('electron');\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |},\n    payWithCredits: boolean\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildElectron(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      exportState.targets,\n      gameId,\n      options,\n      payWithCredits\n    );\n  },\n};\n","// @flow\nimport * as React from 'react';\nimport assignIn from 'lodash/assignIn';\nimport {\n  type Build,\n  buildWeb,\n  getBuildFileUploadOptions,\n} from '../../Utils/GDevelopServices/Build';\nimport { uploadLocalFile } from './LocalFileUploader';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { findGDJS } from '../../GameEngineFinder/LocalGDJSFinder';\nimport { archiveLocalFolder } from '../../Utils/LocalArchiver';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport LocalFileSystem, { type UrlFileDescriptor } from './LocalFileSystem';\nimport {\n  type ExportPipeline,\n  type ExportPipelineContext,\n  type ExportFlowProps,\n} from '../ExportPipeline.flow';\nimport { ExplanationHeader } from '../GenericExporters/OnlineWebExport';\nimport { downloadUrlsToLocalFiles } from '../../Utils/LocalFileDownloader';\nimport OnlineWebExportFlow from '../GenericExporters/OnlineWebExport/OnlineWebExportFlow';\n\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst gd: libGDevelop = global.gd;\n\ntype ExportState = null;\n\ntype PreparedExporter = {|\n  exporter: gdjsExporter,\n  localFileSystem: LocalFileSystem,\n  temporaryOutputDir: string,\n|};\n\ntype ExportOutput = {|\n  temporaryOutputDir: string,\n  urlFiles: Array<UrlFileDescriptor>,\n|};\n\ntype ResourcesDownloadOutput = {|\n  temporaryOutputDir: string,\n|};\n\ntype CompressionOutput = string;\n\nconst exportPipelineName = 'local-online-web';\n\nexport const localOnlineWebExportPipeline: ExportPipeline<\n  ExportState,\n  PreparedExporter,\n  ExportOutput,\n  ResourcesDownloadOutput,\n  CompressionOutput\n> = {\n  name: exportPipelineName,\n  onlineBuildType: 'web-build',\n\n  getInitialExportState: () => null,\n\n  // Build can be launched if just opened the dialog or build errored, re-enabled when done.\n  canLaunchBuild: (exportState, errored, exportStep) =>\n    errored || exportStep === '' || exportStep === 'done',\n\n  // Navigation is enabled when the build is errored or if the build is not done.\n  isNavigationDisabled: (exportStep, errored) =>\n    !errored && !['', 'done'].includes(exportStep),\n\n  renderHeader: () => <ExplanationHeader />,\n\n  renderExportFlow: (props: ExportFlowProps) => (\n    <OnlineWebExportFlow {...props} exportPipelineName={exportPipelineName} />\n  ),\n\n  prepareExporter: (\n    context: ExportPipelineContext<ExportState>\n  ): Promise<PreparedExporter> => {\n    return findGDJS().then(({ gdjsRoot }) => {\n      console.info('GDJS found in ', gdjsRoot);\n\n      const localFileSystem = new LocalFileSystem({\n        downloadUrlsToLocalFiles: true,\n      });\n      const fileSystem = assignIn(\n        new gd.AbstractFileSystemJS(),\n        localFileSystem\n      );\n      const exporter = new gd.Exporter(fileSystem, gdjsRoot);\n      const temporaryOutputDir = path.join(\n        fileSystem.getTempDir(),\n        'OnlineWebExport'\n      );\n      fileSystem.mkDir(temporaryOutputDir);\n      fileSystem.clearDir(temporaryOutputDir);\n\n      return {\n        exporter,\n        localFileSystem,\n        temporaryOutputDir,\n      };\n    });\n  },\n\n  launchExport: async (\n    context: ExportPipelineContext<ExportState>,\n    { exporter, localFileSystem, temporaryOutputDir }: PreparedExporter,\n    fallbackAuthor: ?{ id: string, username: string }\n  ): Promise<ExportOutput> => {\n    const exportOptions = new gd.ExportOptions(\n      context.project,\n      temporaryOutputDir\n    );\n    if (fallbackAuthor) {\n      exportOptions.setFallbackAuthor(\n        fallbackAuthor.id,\n        fallbackAuthor.username\n      );\n    }\n    exporter.exportWholePixiProject(exportOptions);\n    exportOptions.delete();\n    exporter.delete();\n\n    return {\n      temporaryOutputDir,\n      urlFiles: localFileSystem.getAllUrlFilesIn(temporaryOutputDir),\n    };\n  },\n\n  launchResourcesDownload: async (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir, urlFiles }: ExportOutput\n  ): Promise<ResourcesDownloadOutput> => {\n    await downloadUrlsToLocalFiles({\n      urlContainers: urlFiles,\n      onProgress: context.updateStepProgress,\n      throwIfAnyError: true,\n    });\n\n    return { temporaryOutputDir };\n  },\n\n  launchCompression: (\n    context: ExportPipelineContext<ExportState>,\n    { temporaryOutputDir }: ResourcesDownloadOutput\n  ): Promise<CompressionOutput> => {\n    const archiveOutputDir = os.tmpdir();\n    return archiveLocalFolder({\n      path: temporaryOutputDir,\n      outputFilename: path.join(archiveOutputDir, 'game-archive.zip'),\n      sizeLimit: 250 * 1000 * 1000,\n    });\n  },\n\n  launchUpload: (\n    context: ExportPipelineContext<ExportState>,\n    outputFile: CompressionOutput\n  ): Promise<string> => {\n    return getBuildFileUploadOptions().then(uploadOptions => {\n      return uploadLocalFile(\n        outputFile,\n        uploadOptions,\n        context.updateStepProgress\n      ).then(() => uploadOptions.key);\n    });\n  },\n\n  launchOnlineBuild: (\n    exportState: ExportState,\n    authenticatedUser: AuthenticatedUser,\n    uploadBucketKey: string,\n    gameId: string,\n    options: {|\n      gameName: string,\n      gameVersion: string,\n    |},\n    payWithCredits: boolean\n  ): Promise<Build> => {\n    const { getAuthorizationHeader, firebaseUser } = authenticatedUser;\n    if (!firebaseUser)\n      return Promise.reject(new Error('User is not authenticated'));\n\n    return buildWeb(\n      getAuthorizationHeader,\n      firebaseUser.uid,\n      uploadBucketKey,\n      gameId,\n      options,\n      payWithCredits\n    );\n  },\n};\n","// @flow\nimport { type Exporter } from '../ShareDialog';\nimport { localCordovaExportPipeline } from './LocalCordovaExport';\nimport { localElectronExportPipeline } from './LocalElectronExport';\nimport { localHTML5ExportPipeline } from './LocalHTML5Export';\nimport { localFacebookInstantGamesExportPipeline } from './LocalFacebookInstantGamesExport';\nimport { localOnlineCordovaExportPipeline } from './LocalOnlineCordovaExport';\nimport { localOnlineCordovaIosExportPipeline } from './LocalOnlineCordovaIosExport';\nimport { localOnlineElectronExportPipeline } from './LocalOnlineElectronExport';\nimport { localOnlineWebExportPipeline } from './LocalOnlineWebExport';\nimport { cordovaExporter } from '../GenericExporters/CordovaExport';\nimport { onlineWebExporter } from '../GenericExporters/OnlineWebExport';\nimport { html5Exporter } from '../GenericExporters/HTML5Export';\nimport { facebookInstantGamesExporter } from '../GenericExporters/FacebookInstantGamesExport';\nimport { onlineCordovaExporter } from '../GenericExporters/OnlineCordovaExport';\nimport { onlineCordovaIosExporter } from '../GenericExporters/OnlineCordovaIosExport';\nimport { onlineElectronExporter } from '../GenericExporters/OnlineElectronExport';\nimport { electronExporter } from '../GenericExporters/ElectronExport';\n\nexport const localOnlineWebExporter: Exporter = {\n  ...onlineWebExporter,\n  exportPipeline: localOnlineWebExportPipeline,\n};\n\nexport const localAutomatedExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...onlineCordovaExporter,\n    exportPipeline: localOnlineCordovaExportPipeline,\n  },\n  {\n    ...onlineCordovaIosExporter,\n    exportPipeline: localOnlineCordovaIosExportPipeline,\n  },\n  {\n    ...onlineElectronExporter,\n    exportPipeline: localOnlineElectronExportPipeline,\n  },\n  {\n    ...facebookInstantGamesExporter,\n    exportPipeline: localFacebookInstantGamesExportPipeline,\n  },\n];\n\nexport const localManualExporters: Array<Exporter> = [\n  {\n    ...html5Exporter,\n    exportPipeline: localHTML5ExportPipeline,\n  },\n  {\n    ...cordovaExporter,\n    exportPipeline: localCordovaExportPipeline,\n  },\n  {\n    ...electronExporter,\n    exportPipeline: localElectronExportPipeline,\n  },\n];\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport { useCommandWithOptions } from '../CommandPalette/CommandHooks';\nimport {\n  buildMainMenuDeclarativeTemplate,\n  type BuildMainMenuProps,\n  type MainMenuCallbacks,\n  type MainMenuExtraCallbacks,\n  type MainMenuEvent,\n} from './MainMenu';\nimport PreferencesContext from './Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst remote = optionalRequire('@electron/remote');\nconst app = remote ? remote.app : null;\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n// Custom hook to register and deregister IPC listener\nconst useIPCEventListener = ({\n  ipcEvent,\n  callback,\n  shouldApply,\n}: {\n  ipcEvent: MainMenuEvent,\n  callback: Function,\n  shouldApply: boolean,\n}) => {\n  React.useEffect(\n    () => {\n      if (!ipcRenderer || !shouldApply) return;\n\n      const handler = (event, ...eventArgs) => callback(...eventArgs);\n      ipcRenderer.on(ipcEvent, handler);\n      return () => ipcRenderer.removeListener(ipcEvent, handler);\n    },\n    [ipcEvent, callback, shouldApply]\n  );\n};\n\nconst useAppEventListener = ({\n  event,\n  callback,\n}: {\n  event: string,\n  callback: Function,\n}) => {\n  React.useEffect(\n    () => {\n      if (!app) return;\n      const handler = (event, ...eventArgs) => callback(...eventArgs);\n      app.on(event, handler);\n      return () => app.removeListener(event, handler);\n    },\n    [event, callback]\n  );\n};\n\nconst isMainWindow = (windowTitle: string): boolean => {\n  if (!windowTitle) return false;\n  const lowercaseTitle = windowTitle.toLowerCase();\n  return (\n    lowercaseTitle.startsWith('gdevelop') &&\n    lowercaseTitle !== 'gdevelop dialogue tree editor (yarn)' &&\n    lowercaseTitle !== 'gdevelop sound effects editor (jfxr)' &&\n    lowercaseTitle !== 'gdevelop image editor (piskel)'\n  );\n};\n\n/**\n * Create and update the editor main menu using Electron APIs.\n */\nconst ElectronMainMenu = ({\n  props,\n  callbacks,\n  extraCallbacks,\n}: {|\n  props: BuildMainMenuProps,\n  callbacks: MainMenuCallbacks,\n  extraCallbacks: MainMenuExtraCallbacks,\n|}) => {\n  const {\n    i18n,\n    project,\n    canSaveProjectAs,\n    recentProjectFiles,\n    shortcutMap,\n    isApplicationTopLevelMenu,\n  } = props;\n  const { onClosePreview } = extraCallbacks;\n  const language = i18n.language;\n  const [\n    isFocusedOnMainWindow,\n    setIsFocusedOnMainWindow,\n  ] = React.useState<boolean>(true);\n  const [focusedWindowId, setFocusedWindowId] = React.useState<number>(\n    remote.getCurrentWindow().id\n  );\n  const closePreviewWindow =\n    !isFocusedOnMainWindow && onClosePreview\n      ? () => onClosePreview(focusedWindowId)\n      : null;\n  const {\n    values: { useShortcutToClosePreviewWindow },\n  } = React.useContext(PreferencesContext);\n\n  useAppEventListener({\n    event: 'browser-window-focus',\n    callback: window => {\n      setFocusedWindowId(window.id);\n      setIsFocusedOnMainWindow(isMainWindow(window.title));\n    },\n  });\n  useAppEventListener({\n    event: 'browser-window-blur',\n    callback: window => {\n      setIsFocusedOnMainWindow(!isMainWindow(window.title));\n    },\n  });\n\n  // We could use a for loop, but for safety let's write every hook one by\n  // one to avoid any change at runtime which would break the rules of hooks.\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open',\n    callback: callbacks.onChooseProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-recent',\n    callback: callbacks.onOpenRecentFile,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-save',\n    callback: callbacks.onSaveProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-save-as',\n    callback: callbacks.onSaveProjectAs,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-show-version-history',\n    callback: callbacks.onShowVersionHistory,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-close',\n    callback:\n      useShortcutToClosePreviewWindow && closePreviewWindow\n        ? closePreviewWindow\n        : callbacks.onCloseProject,\n    shouldApply:\n      useShortcutToClosePreviewWindow && closePreviewWindow\n        ? true\n        : isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-close-app',\n    callback: callbacks.onCloseApp,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-export',\n    callback: callbacks.onExportProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-invite-collaborators',\n    callback: callbacks.onInviteCollaborators,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-create-template',\n    callback: callbacks.onCreateProject,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-create-blank',\n    callback: callbacks.onCreateBlank,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-project-manager',\n    callback: callbacks.onOpenProjectManager,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-home-page',\n    callback: callbacks.onOpenHomePage,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-debugger',\n    callback: callbacks.onOpenDebugger,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-about',\n    callback: callbacks.onOpenAbout,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-preferences',\n    callback: callbacks.onOpenPreferences,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-language',\n    callback: callbacks.onOpenLanguage,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'main-menu-open-profile',\n    callback: callbacks.onOpenProfile,\n    shouldApply: isFocusedOnMainWindow,\n  });\n  useIPCEventListener({\n    ipcEvent: 'update-status',\n    callback: callbacks.setElectronUpdateStatus,\n    shouldApply: true, // Keep logic around app update even if on preview window\n  });\n\n  React.useEffect(\n    () => {\n      if (ipcRenderer) {\n        ipcRenderer.send(\n          'set-main-menu',\n          buildMainMenuDeclarativeTemplate({\n            project,\n            canSaveProjectAs,\n            i18n,\n            recentProjectFiles,\n            shortcutMap,\n            isApplicationTopLevelMenu,\n          })\n        );\n      }\n    },\n    [\n      i18n,\n      language,\n      project,\n      canSaveProjectAs,\n      recentProjectFiles,\n      shortcutMap,\n      isApplicationTopLevelMenu,\n    ]\n  );\n\n  const { onOpenRecentFile } = callbacks;\n  useCommandWithOptions('OPEN_RECENT_PROJECT', true, {\n    generateOptions: React.useCallback(\n      () =>\n        recentProjectFiles.map(item => ({\n          text: item.fileMetadata.fileIdentifier,\n          handler: () => onOpenRecentFile(item),\n        })),\n      [onOpenRecentFile, recentProjectFiles]\n    ),\n  });\n\n  return null;\n};\n\nexport default ElectronMainMenu;\n","// @flow\nimport {\n  type EventsFunctionCodeWriter,\n  type EventsFunctionCodeWriterCallbacks,\n} from '..';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { getUID } from '../../Utils/LocalUserInfo';\nimport slugs from 'slugs';\nconst path = optionalRequire('path');\nconst os = optionalRequire('os');\nconst fs = optionalRequire('fs');\n\n/**\n * Create the EventsFunctionCodeWriter that writes generated code for events functions\n * to local files.\n */\nexport const makeLocalEventsFunctionCodeWriter = ({\n  onWriteFile,\n}: EventsFunctionCodeWriterCallbacks): EventsFunctionCodeWriter => {\n  // The generated code for extensions will be stored in a temporary directory\n\n  const outputDir = path.join(\n    os.tmpdir(),\n    `GDGeneratedEventsFunctions-` + getUID()\n  );\n  fs.mkdir(outputDir, err => {\n    if (err && err.code !== 'EEXIST') {\n      console.error(\n        'Unable to create the directory where to output events functions generated code: ',\n        err\n      );\n      return;\n    }\n  });\n\n  const getPathFor = (codeNamespace: string) => {\n    return `${outputDir}/${slugs(codeNamespace)}.js`;\n  };\n\n  return {\n    getIncludeFileFor: (codeNamespace: string) => getPathFor(codeNamespace),\n    writeFunctionCode: (\n      functionCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(functionCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeBehaviorCode: (\n      behaviorCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(behaviorCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n    writeObjectCode: (\n      objectCodeNamespace: string,\n      code: string\n    ): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        const includeFile = getPathFor(objectCodeNamespace);\n        onWriteFile({ includeFile, content: code });\n        fs.writeFile(includeFile, code, err => {\n          if (err) return reject(err);\n\n          resolve();\n        });\n      });\n    },\n  };\n};\n","// @flow\nimport { serializeToJSObject } from '../../Utils/Serializer';\nimport optionalRequire from '../../Utils/OptionalRequire';\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nconst writeJSONFile = (object: Object, filepath: string): Promise<void> => {\n  if (!fs) return Promise.reject(new Error('Filesystem is not supported.'));\n\n  try {\n    const content = JSON.stringify(object, null, 2);\n    return fs.ensureDir(path.dirname(filepath)).then(\n      () =>\n        new Promise((resolve, reject) => {\n          fs.writeFile(filepath, content, (err: ?Error) => {\n            if (err) {\n              return reject(err);\n            }\n\n            return resolve();\n          });\n        })\n    );\n  } catch (stringifyException) {\n    return Promise.reject(stringifyException);\n  }\n};\n\nexport default class LocalEventsFunctionsExtensionWriter {\n  static chooseEventsFunctionExtensionFile = (\n    extensionName?: string\n  ): Promise<?string> => {\n    if (!dialog) return Promise.reject('Not supported');\n    const browserWindow = remote.getCurrentWindow();\n\n    return dialog\n      .showSaveDialog(browserWindow, {\n        title: 'Export an extension of the project',\n        filters: [\n          {\n            name: 'GDevelop 5 \"events based\" extension',\n            extensions: ['json'],\n          },\n        ],\n        defaultPath: extensionName || 'Extension.json',\n      })\n      .then(({ filePath }) => {\n        if (!filePath) return null;\n        return filePath;\n      });\n  };\n\n  static writeEventsFunctionsExtension = (\n    extension: gdEventsFunctionsExtension,\n    filepath: string\n  ): Promise<void> => {\n    const serializedObject = serializeToJSObject(extension);\n    return writeJSONFile(serializedObject, filepath).catch(err => {\n      console.error('Unable to write the events function extension:', err);\n      throw err;\n    });\n  };\n}\n","// @flow\nimport { openFilePicker, readJSONFile } from '../../Utils/FileSystem';\n\nexport default class LocalEventsFunctionsExtensionOpener {\n  static chooseEventsFunctionExtensionFile = (): Promise<?string> => {\n    return openFilePicker({\n      title: 'Import an extension in the project',\n      properties: ['openFile'],\n      message: 'Choose an extension file to import (.json file)',\n      filters: [\n        {\n          name: 'GDevelop 5 \"events based\" extension',\n          extensions: ['json'],\n        },\n      ],\n    }).then(filePath => filePath);\n  };\n\n  static readEventsFunctionExtensionFile = (\n    filepath: string\n  ): Promise<Object> => {\n    return readJSONFile(filepath);\n  };\n}\n","// @flow\n// TODO: This module could be published on npm if useful.\nimport newNameGenerator from './NewNameGenerator';\nimport slugs from 'slugs';\n\ntype PartialObjectDescription = {|\n  reference: string,\n  object: Object,\n|};\n\ntype Reference = {\n  referenceTo: string,\n};\n\ntype SplitConfiguration = {|\n  pathSeparator: string,\n  getArrayItemReferenceName: (\n    object: Object,\n    currentReference: string\n  ) => string,\n  shouldSplit: (path: string) => boolean,\n  isReferenceMagicPropertyName: string,\n|};\n\ntype UnsplitConfiguration = {|\n  isReferenceMagicPropertyName: string,\n  getReferencePartialObject: (referencePath: string) => Promise<Object>,\n  maxUnsplitDepth?: number,\n|};\n\n/**\n * Mutate the given object to split it into multiple partial objects.\n * Partial objects will be replaced by references.\n *\n * @param object The object to be split.\n * @param configuration Configuration to be used to split the object.\n */\nexport const split = (\n  object: Object,\n  {\n    pathSeparator,\n    getArrayItemReferenceName,\n    shouldSplit,\n    isReferenceMagicPropertyName,\n  }: SplitConfiguration\n): Array<PartialObjectDescription> => {\n  const partialObjects = [];\n  const createReference = (reference, object): Reference => {\n    partialObjects.push({\n      reference,\n      object,\n    });\n\n    return {\n      [isReferenceMagicPropertyName]: true,\n      referenceTo: reference,\n    };\n  };\n\n  const splitObject = (\n    currentObject: Object,\n    currentPath: string,\n    currentReference: string\n  ) => {\n    if (currentObject !== null && typeof currentObject === 'object') {\n      if (Array.isArray(currentObject)) {\n        for (let index in currentObject) {\n          const itemPath = currentPath + pathSeparator + '*';\n          if (shouldSplit(itemPath)) {\n            const partialObject = currentObject[index];\n            const name = getArrayItemReferenceName(\n              partialObject,\n              currentReference\n            );\n            const itemReference = currentReference + pathSeparator + name;\n\n            currentObject[index] = createReference(\n              itemReference,\n              partialObject\n            );\n\n            splitObject(partialObject, itemPath, itemReference);\n          } else {\n            const itemReference = currentReference + pathSeparator + index;\n\n            splitObject(currentObject[index], itemPath, itemReference);\n          }\n        }\n      } else {\n        for (let propertyName in currentObject) {\n          const propertyPath = currentPath + pathSeparator + propertyName;\n          const propertyReference =\n            currentReference + pathSeparator + propertyName;\n          if (shouldSplit(propertyPath)) {\n            const partialObject = currentObject[propertyName];\n\n            currentObject[propertyName] = createReference(\n              propertyReference,\n              partialObject\n            );\n\n            splitObject(partialObject, propertyPath, propertyReference);\n          } else {\n            splitObject(\n              currentObject[propertyName],\n              propertyPath,\n              propertyReference\n            );\n          }\n        }\n      }\n    }\n  };\n\n  splitObject(object, '', '');\n  return partialObjects;\n};\n\n/**\n * Mutate the given object to recompose it from partial objects.\n * References to partial objects will be fetched as needed.\n *\n * @param object The object to be unsplit.\n * @param configuration Configuration to be used to unsplit the object.\n */\nexport const unsplit = (\n  object: Object,\n  {\n    isReferenceMagicPropertyName,\n    getReferencePartialObject,\n    maxUnsplitDepth,\n  }: UnsplitConfiguration\n): Promise<void> => {\n  const isReference = (object: Object): ?Reference => {\n    if (object[isReferenceMagicPropertyName] === true) {\n      return object;\n    }\n\n    return null;\n  };\n\n  const unsplitObject = (\n    currentObject: Object,\n    depth: number\n  ): Promise<void> => {\n    if (maxUnsplitDepth !== undefined && depth >= maxUnsplitDepth) {\n      return Promise.resolve();\n    }\n\n    if (currentObject !== null && typeof currentObject === 'object') {\n      const keys = Object.keys(currentObject);\n      if (keys) {\n        return Promise.all(\n          keys.map(indexOrPropertyName => {\n            const reference = isReference(currentObject[indexOrPropertyName]);\n            if (reference) {\n              return getReferencePartialObject(reference.referenceTo).then(\n                partialObject => {\n                  currentObject[indexOrPropertyName] = partialObject;\n\n                  return unsplitObject(\n                    currentObject[indexOrPropertyName],\n                    depth + 1\n                  );\n                }\n              );\n            }\n\n            return unsplitObject(currentObject[indexOrPropertyName], depth + 1);\n          })\n        ).then(() => {});\n      }\n    }\n\n    return Promise.resolve();\n  };\n\n  return unsplitObject(object, 0);\n};\n\n/**\n * A helper that can be used to split according to a list of hardcoded paths\n */\nexport const splitPaths = (paths: Set<string>) => {\n  return (path: string) => paths.has(path);\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getNameFromProperty = (propertyName: string) => {\n  return (object: Object): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    return property;\n  };\n};\n\n/**\n * A helper that can be used to get the name of items in array using an hardcoded property name.\n */\nexport const getSlugifiedUniqueNameFromProperty = (propertyName: string) => {\n  const existingNamesForReference = {};\n\n  return (object: Object, currentReference: string): string => {\n    const property = object[propertyName];\n    if (typeof property !== 'string') {\n      throw new Error(`Property ${propertyName} is not a string`);\n    }\n\n    existingNamesForReference[currentReference] =\n      existingNamesForReference[currentReference] || {};\n    const newName = newNameGenerator(\n      slugs(property),\n      name => !!existingNamesForReference[currentReference][name]\n    );\n    existingNamesForReference[currentReference][newName] = true;\n    return newName;\n  };\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { type FileMetadata } from '../index';\nimport { unsplit } from '../../Utils/ObjectSplitter';\nimport { openFilePicker, readJSONFile } from '../../Utils/FileSystem';\nconst fs = optionalRequire('fs');\nconst path = optionalRequire('path');\n\nexport const onOpenWithPicker = (): Promise<?FileMetadata> => {\n  return openFilePicker({\n    title: 'Open a project',\n    properties: ['openFile'],\n    message:\n      'If you want to open your GDevelop 4 project, be sure to save it as a .json file',\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  }).then(filePath => (filePath ? { fileIdentifier: filePath } : null));\n};\n\nexport const onOpen = (\n  fileMetadata: FileMetadata\n): Promise<{|\n  content: Object,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const projectPath = path.dirname(filePath);\n  return readJSONFile(filePath).then(object => {\n    return unsplit(object, {\n      getReferencePartialObject: referencePath => {\n        return readJSONFile(path.join(projectPath, referencePath) + '.json');\n      },\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n      // Limit unsplitting to depth 3 (which would allow properties of layouts/external layouts/external events\n      // to be un-splitted, but not the content of these properties), to avoid very slow processing\n      // of large game files.\n      maxUnsplitDepth: 3,\n    }).then(() => {\n      return { content: object };\n    });\n  });\n};\n\nexport const getAutoSaveCreationDate = async (\n  fileMetadata: FileMetadata,\n  compareLastModified: boolean\n): Promise<?number> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const autoSavePath = filePath + '.autosave';\n  if (fs.existsSync(autoSavePath)) {\n    const autoSavedTime = fs.statSync(autoSavePath).mtime.getTime();\n    if (!compareLastModified) {\n      return autoSavedTime;\n    }\n    try {\n      const saveTime = fs.statSync(filePath).mtime.getTime();\n      // When comparing the last modified time, add a 5 seconds margin to avoid\n      // showing the warning if the user has just saved the project, or if the\n      // project has been decompressed from a zip file, causing the last modified\n      // time to be the time of decompression.\n      return autoSavedTime > saveTime + 5000 ? autoSavedTime : null;\n    } catch (err) {\n      console.error('Unable to compare *.autosave to project', err);\n      return null;\n    }\n  }\n  return null;\n};\n\nexport const onGetAutoSave = (fileMetadata: FileMetadata) => {\n  return Promise.resolve({\n    ...fileMetadata,\n    fileIdentifier: fileMetadata.fileIdentifier + '.autosave',\n  });\n};\n","// @flow\nimport { t } from '@lingui/macro';\nimport * as React from 'react';\nimport { serializeToJSObject, serializeToJSON } from '../../Utils/Serializer';\nimport { type FileMetadata, type SaveAsLocation } from '../index';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport {\n  split,\n  splitPaths,\n  getSlugifiedUniqueNameFromProperty,\n} from '../../Utils/ObjectSplitter';\nimport type { MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport LocalFolderPicker from '../../UI/LocalFolderPicker';\n\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\nconst remote = optionalRequire('@electron/remote');\nconst dialog = remote ? remote.dialog : null;\n\nexport const splittedProjectFolderNames = [\n  'layouts',\n  'externalLayouts',\n  'externalEvents',\n  'eventsFunctionsExtensions',\n];\n\nconst deleteExistingFilesFromDirs = (\n  project: gdProject,\n  projectPath: string\n) => {\n  //If multiFile is not enabled in settings and directories do not exist.\n  if (!project.isFolderProject()) return;\n\n  const entries = fs.readdirSync(projectPath);\n  entries.forEach(entry => {\n    if (!splittedProjectFolderNames.includes(entry)) return;\n\n    const dirPath = path.join(projectPath, entry);\n    if (!fs.statSync(dirPath).isDirectory()) return;\n\n    const filenames = fs.readdirSync(dirPath);\n    filenames.forEach(file => {\n      const fileToRemovePath = path.join(dirPath, file);\n      try {\n        fs.unlinkSync(fileToRemovePath);\n      } catch (e) {\n        throw new Error(`Unable to remove file ${file}: ${e.message}`);\n      }\n    });\n  });\n};\n\nconst checkFileContent = (filePath: string, expectedContent: string) => {\n  const time = performance.now();\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, { encoding: 'utf8' }, (err, content) => {\n      if (err) return reject(err);\n\n      if (content === '') {\n        reject(new Error(`Written file is empty, did the write fail?`));\n      }\n      if (content !== expectedContent) {\n        reject(\n          new Error(\n            `Written file is not containing the expected content, did the write fail?`\n          )\n        );\n      }\n      const verificationTime = performance.now() - time;\n      console.info(\n        `Verified ${filePath} content in ${verificationTime.toFixed()}ms.`\n      );\n      resolve();\n    });\n  });\n};\n\nconst writeAndCheckFile = async (\n  content: string,\n  filePath: string\n): Promise<void> => {\n  if (!fs) throw new Error('Filesystem is not supported.');\n  if (content === '')\n    throw new Error('The content to save on disk is empty. Aborting.');\n\n  await fs.ensureDir(path.dirname(filePath));\n\n  await fs.writeFile(filePath, content);\n  await checkFileContent(filePath, content);\n};\n\nconst writeAndCheckFormattedJSONFile = async (\n  object: Object,\n  filePath: string\n): Promise<void> => {\n  const content = JSON.stringify(object, null, 2);\n  await writeAndCheckFile(content, filePath);\n};\n\nconst writeProjectFiles = (\n  project: gdProject,\n  filePath: string,\n  projectPath: string\n): Promise<void> => {\n  const serializedProjectObject = serializeToJSObject(project);\n  if (project.isFolderProject()) {\n    const partialObjects = split(serializedProjectObject, {\n      pathSeparator: '/',\n      getArrayItemReferenceName: getSlugifiedUniqueNameFromProperty('name'),\n      shouldSplit: splitPaths(\n        new Set(\n          splittedProjectFolderNames.map(folderName => `/${folderName}/*`)\n        )\n      ),\n      isReferenceMagicPropertyName: '__REFERENCE_TO_SPLIT_OBJECT',\n    });\n\n    return Promise.all(\n      partialObjects.map(partialObject => {\n        return writeAndCheckFormattedJSONFile(\n          partialObject.object,\n          path.join(projectPath, partialObject.reference) + '.json'\n        ).catch(err => {\n          console.error('Unable to write a partial file:', err);\n          throw err;\n        });\n      })\n    ).then(() => {\n      return writeAndCheckFormattedJSONFile(\n        serializedProjectObject,\n        filePath\n      ).catch(err => {\n        console.error('Unable to write the split project:', err);\n        throw err;\n      });\n    });\n  } else {\n    return writeAndCheckFormattedJSONFile(\n      serializedProjectObject,\n      filePath\n    ).catch(err => {\n      console.error('Unable to write the project:', err);\n      throw err;\n    });\n  }\n};\n\nexport const onSaveProject = async (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: FileMetadata,\n|}> => {\n  const filePath = fileMetadata.fileIdentifier;\n  const now = Date.now();\n  if (!filePath) {\n    throw new Error('Unable to find file path before saving.');\n  }\n  // Ensure we always pick the latest name and gameId.\n  const newFileMetadata = {\n    ...fileMetadata,\n    name: project.getName(),\n    gameId: project.getProjectUuid(),\n    lastModifiedDate: now,\n  };\n\n  const projectPath = path.dirname(filePath);\n\n  try {\n    deleteExistingFilesFromDirs(project, projectPath);\n  } catch (e) {\n    console.warn('Unable to clean project folder before saving project: ', e);\n  }\n\n  await writeProjectFiles(project, filePath, projectPath);\n  return {\n    wasSaved: true,\n    fileMetadata: newFileMetadata,\n  };\n};\n\nexport const onChooseSaveProjectAsLocation = async ({\n  project,\n  fileMetadata,\n}: {|\n  project: gdProject,\n  fileMetadata: ?FileMetadata, // This is the current location.\n|}): Promise<{|\n  saveAsLocation: ?SaveAsLocation, // This is the newly chosen location (or null if cancelled).\n|}> => {\n  const defaultPath = fileMetadata ? fileMetadata.fileIdentifier : '';\n  const browserWindow = remote.getCurrentWindow();\n  const saveDialogOptions = {\n    defaultPath,\n    filters: [{ name: 'GDevelop 5 project', extensions: ['json'] }],\n  };\n\n  if (!dialog) {\n    throw new Error('Unsupported');\n  }\n  const filePath = dialog.showSaveDialogSync(browserWindow, saveDialogOptions);\n  if (!filePath) {\n    return { saveAsLocation: null };\n  }\n\n  return {\n    saveAsLocation: {\n      fileIdentifier: filePath,\n    },\n  };\n};\n\nexport const onSaveProjectAs = async (\n  project: gdProject,\n  saveAsLocation: ?SaveAsLocation,\n  options: {|\n    onStartSaving: () => void,\n    onMoveResources: ({|\n      newFileMetadata: FileMetadata,\n    |}) => Promise<void>,\n  |}\n): Promise<{|\n  wasSaved: boolean,\n  fileMetadata: ?FileMetadata,\n|}> => {\n  if (!saveAsLocation)\n    throw new Error('A location was not chosen before saving as.');\n  const filePath = saveAsLocation.fileIdentifier;\n  if (!filePath)\n    throw new Error('A file path was not chosen before saving as.');\n\n  options.onStartSaving();\n  // Ensure we always pick the latest name and gameId.\n  const newFileMetadata = {\n    fileIdentifier: filePath,\n    name: project.getName(),\n    gameId: project.getProjectUuid(),\n    lastModifiedDate: Date.now(),\n  };\n\n  // Move (copy or download, etc...) the resources first.\n  await options.onMoveResources({ newFileMetadata });\n\n  // Save the project when resources have been copied.\n  const projectPath = path.dirname(filePath);\n  project.setProjectFile(filePath);\n\n  await writeProjectFiles(project, filePath, projectPath);\n  return {\n    wasSaved: true,\n    fileMetadata: newFileMetadata,\n  };\n};\n\nexport const onAutoSaveProject = (\n  project: gdProject,\n  fileMetadata: FileMetadata\n): Promise<void> => {\n  const autoSavePath = fileMetadata.fileIdentifier + '.autosave';\n  return writeAndCheckFile(serializeToJSON(project), autoSavePath).catch(\n    err => {\n      console.error(`Unable to write ${autoSavePath}:`, err);\n      throw err;\n    }\n  );\n};\n\nexport const getWriteErrorMessage = (error: Error): MessageDescriptor =>\n  t`An error occurred when saving the project. Please try again by choosing another location.`;\n\n// See https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file\nconst forbiddenCharacterRegex = /\\\\ | \\/ | : | \\* | \\? | \" | < | > | \\|/g;\nconst consecutiveSpacesRegex = /\\s+/g;\nconst cleanUpProjectFileName = (projectFileName: string) =>\n  (projectFileName.length > 200\n    ? projectFileName.substring(0, 200)\n    : projectFileName\n  )\n    .replace(forbiddenCharacterRegex, ' ')\n    .replace(consecutiveSpacesRegex, ' ')\n    .trim();\n\nexport const getProjectLocation = ({\n  projectName,\n  saveAsLocation,\n  newProjectsDefaultFolder,\n}: {\n  projectName: string,\n  saveAsLocation: ?SaveAsLocation,\n  newProjectsDefaultFolder?: string,\n}): SaveAsLocation => {\n  const outputPath = saveAsLocation\n    ? path.dirname(saveAsLocation.fileIdentifier)\n    : newProjectsDefaultFolder\n    ? newProjectsDefaultFolder\n    : '';\n  const projectFileName = projectName\n    ? cleanUpProjectFileName(projectName) + '.json'\n    : 'game.json';\n  return {\n    fileIdentifier: path.join(outputPath, projectFileName),\n  };\n};\n\nexport const renderNewProjectSaveAsLocationChooser = ({\n  projectName,\n  saveAsLocation,\n  setSaveAsLocation,\n  newProjectsDefaultFolder,\n}: {|\n  projectName: string,\n  saveAsLocation: ?SaveAsLocation,\n  setSaveAsLocation: (?SaveAsLocation) => void,\n  newProjectsDefaultFolder?: string,\n|}) => {\n  const projectLocation = getProjectLocation({\n    projectName,\n    saveAsLocation,\n    newProjectsDefaultFolder,\n  });\n  return (\n    <LocalFolderPicker\n      fullWidth\n      value={path.dirname(projectLocation.fileIdentifier)}\n      onChange={newOutputPath => {\n        const newOutputFileIdentifier = path.join(\n          newOutputPath,\n          path.basename(projectLocation.fileIdentifier)\n        );\n        setSaveAsLocation(\n          getProjectLocation({\n            projectName,\n            saveAsLocation: {\n              fileIdentifier: newOutputFileIdentifier,\n            },\n            newProjectsDefaultFolder,\n          })\n        );\n      }}\n      type=\"create-game\"\n    />\n  );\n};\n\nexport const isTryingToSaveInForbiddenPath = (filePath: string): boolean => {\n  if (!remote) return false; // This should not happen, but let's be safe.\n  // If the user is saving locally and chose the same location as where the\n  // executable is running, prevent this, as it will be deleted when the app is updated.\n  const exePath = remote.app.getPath('exe');\n  if (!exePath) return false; // This should not happen, but let's be safe.\n  const gdevelopDirectory = path.dirname(exePath);\n  return filePath.startsWith(gdevelopDirectory);\n};\n","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nexport default React.memo(props => (\n  <SvgIcon {...props} viewBox=\"0 0 16 16\" style={{ fill: 'none' }}>\n    <path\n      d=\"M5.75 11.25C5.75 11.25 6 14.25 4 15.25H12C10 14.25 10.25 11.25 10.25 11.25M5.75 11.25H13.25C14.3546 11.25 15.25 10.3546 15.25 9.25V2.75C15.25 1.64543 14.3546 0.75 13.25 0.75H2.75C1.64543 0.75 0.75 1.64543 0.75 2.75V9.25C0.75 10.3546 1.64543 11.25 2.75 11.25H5.75Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"1.5\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    />\n  </SvgIcon>\n));\n","// @flow\n\nimport {\n  applyResourceDefaults,\n  getLocalResourceFullPath,\n  getResourceFilePathStatus,\n} from '../../ResourcesList/ResourceUtils';\nimport { mapVector } from '../../Utils/MapFor';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport optionalLazyRequire from '../../Utils/OptionalLazyRequire';\nimport optionalRequire from '../../Utils/OptionalRequire';\n\nconst gd: libGDevelop = global.gd;\n\nconst lazyRequireGlob = optionalLazyRequire('glob');\nconst path = optionalRequire('path');\n\n// It's important to use remote and not electron for folder actions,\n// otherwise they will be opened in the background.\n// See https://github.com/electron/electron/issues/4349#issuecomment-777475765\nconst remote = optionalRequire('@electron/remote');\n\nexport const locateResourceFile = ({\n  project,\n  resource,\n}: {|\n  project: gdProject,\n  resource: gdResource,\n|}) => {\n  const resourceFilePath = getLocalResourceFullPath(\n    project,\n    resource.getName()\n  );\n\n  remote.shell.showItemInFolder(path.resolve(resourceFilePath));\n};\n\nexport const openResourceFile = ({\n  project,\n  resource,\n}: {|\n  project: gdProject,\n  resource: gdResource,\n|}) => {\n  const resourceFilePath = getLocalResourceFullPath(\n    project,\n    resource.getName()\n  );\n  remote.shell.openPath(path.resolve(resourceFilePath));\n};\n\nexport const copyResourceFilePath = ({\n  project,\n  resource,\n}: {|\n  project: gdProject,\n  resource: gdResource,\n|}) => {\n  const resourceFilePath = getLocalResourceFullPath(\n    project,\n    resource.getName()\n  );\n  remote.clipboard.writeText(path.resolve(resourceFilePath));\n};\n\nexport const scanForNewResources = async ({\n  project,\n  extensions,\n  createResource,\n}: {|\n  project: gdProject,\n  extensions: Array<string>,\n  createResource: () => gdResource,\n|}) => {\n  const glob = lazyRequireGlob();\n  if (!glob) return;\n\n  const resourcesManager = project.getResourcesManager();\n  const projectPath = path.dirname(project.getProjectFile());\n\n  const allExtensions = [\n    ...extensions,\n    ...extensions.map(extension => extension.toUpperCase()),\n  ];\n\n  try {\n    const allFiles = await new Promise((resolve, reject) => {\n      glob(\n        projectPath + '/**/*.{' + allExtensions.join(',') + '}',\n        (error, files) => {\n          if (error) reject(error);\n          else resolve(files);\n        }\n      );\n    });\n\n    const filesToCheck = new gd.VectorString();\n    allFiles.forEach(filePath =>\n      filesToCheck.push_back(path.relative(projectPath, filePath))\n    );\n    const filePathsNotInResources = project\n      .getResourcesManager()\n      .findFilesNotInResources(filesToCheck);\n    filesToCheck.delete();\n\n    mapVector(filePathsNotInResources, (relativeFilePath: string) => {\n      const resourceName = newNameGenerator(relativeFilePath, name =>\n        resourcesManager.hasResource(name)\n      );\n\n      const resource = createResource();\n      resource.setFile(relativeFilePath);\n      resource.setName(resourceName);\n      applyResourceDefaults(project, resource);\n      resourcesManager.addResource(resource);\n      resource.delete();\n\n      console.info(\n        `\"${relativeFilePath}\" added to project as resource named \"${resourceName}\".`\n      );\n    });\n  } catch (error) {\n    console.error(`Error finding files inside ${projectPath}:`, error);\n    return;\n  }\n};\n\nexport const removeAllResourcesWithInvalidPath = ({\n  project,\n}: {|\n  project: gdProject,\n|}) => {\n  const resourcesManager = project.getResourcesManager();\n  const removedResourceNames = resourcesManager\n    .getAllResourceNames()\n    .toJSArray()\n    .filter(resourceName => {\n      return getResourceFilePathStatus(project, resourceName) === 'error';\n    });\n\n  removedResourceNames.forEach(resourceName => {\n    resourcesManager.removeResource(resourceName);\n    console.info('Removed due to invalid path: ' + resourceName);\n  });\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport debounce from 'lodash/debounce';\nimport wrap from 'lodash/wrap';\nimport memoize from 'lodash/memoize';\nimport { splittedProjectFolderNames } from './LocalProjectWriter';\n\nconst path = optionalRequire('path');\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\nexport const setupResourcesWatcher =\n  ipcRenderer && path\n    ? ({\n        fileIdentifier,\n        callback,\n        options,\n      }: {\n        fileIdentifier: string,\n        callback: ({| identifier: string |}) => void,\n        options?: {| isProjectSplitInMultipleFiles: boolean |},\n      }) => {\n        // We can't just debounce the whole callback, it has to be done file-wise,\n        // otherwise we would miss all the debounced calls but the last one.\n        // See https://stackoverflow.com/questions/28787436/debounce-a-function-with-argument\n        const debouncedCallback = wrap(\n          memoize(() =>\n            debounce(\n              filePath => {\n                const relativePath = path\n                  .relative(folderPath, filePath)\n                  .replace(/\\\\/g, '/');\n\n                callback({ identifier: relativePath });\n              },\n              200,\n              { leading: false, trailing: true }\n            )\n          ),\n          (getMemoizedFunc, obj) => getMemoizedFunc(obj)(obj)\n        );\n        const folderPath = path.dirname(fileIdentifier);\n        const gameFile = path.basename(fileIdentifier);\n        const autosaveFile = gameFile + '.autosave';\n        ipcRenderer.on('project-file-changed', (event, path) => {\n          // TODO: Is it safe to let it like that since the OS could for some reason\n          // do never-ending operations on the folder or its children, making the debounce\n          // never ending.\n          debouncedCallback(path);\n        });\n        const ignore = [\n          '**/.DS_Store', // macOS folder attributes file\n          '**/.git/**', // For projects using git as a versioning tool.\n          path.join(folderPath, gameFile),\n          path.join(folderPath, autosaveFile),\n        ];\n        if (options && options.isProjectSplitInMultipleFiles) {\n          ignore.push(\n            ...splittedProjectFolderNames.map(folderName =>\n              path.join(folderPath, folderName, '*.json')\n            )\n          );\n        }\n        const subscriptionIdPromise = ipcRenderer.invoke(\n          'local-filesystem-watcher-setup',\n          folderPath,\n          JSON.stringify({\n            ignore,\n          })\n        );\n\n        return () => {\n          ipcRenderer.removeAllListeners('project-file-changed');\n          subscriptionIdPromise.then(subscriptionId => {\n            ipcRenderer.invoke(\n              'local-filesystem-watcher-disable',\n              subscriptionId\n            );\n          });\n        };\n      }\n    : undefined;\n","// @flow\nimport * as React from 'react';\nimport { Trans, t } from '@lingui/macro';\nimport { type StorageProvider, type FileMetadata } from '../index';\nimport {\n  onOpenWithPicker,\n  onOpen,\n  getAutoSaveCreationDate,\n  onGetAutoSave,\n} from './LocalProjectOpener';\nimport {\n  onSaveProject,\n  onChooseSaveProjectAsLocation,\n  onSaveProjectAs,\n  onAutoSaveProject,\n  getWriteErrorMessage,\n  renderNewProjectSaveAsLocationChooser,\n  getProjectLocation,\n  isTryingToSaveInForbiddenPath,\n} from './LocalProjectWriter';\nimport {\n  type AppArguments,\n  POSITIONAL_ARGUMENTS_KEY,\n} from '../../Utils/Window';\nimport { type MessageDescriptor } from '../../Utils/i18n/MessageDescriptor.flow';\nimport Computer from '../../UI/CustomSvgIcons/Computer';\nimport {\n  copyResourceFilePath,\n  locateResourceFile,\n  openResourceFile,\n  removeAllResourcesWithInvalidPath,\n  scanForNewResources,\n} from './LocalProjectResourcesHandler';\nimport { allResourceKindsAndMetadata } from '../../ResourcesList/ResourceSource';\nimport {\n  type ShowAlertFunction,\n  type ShowConfirmFunction,\n} from '../../UI/Alert/AlertContext';\nimport { setupResourcesWatcher } from './LocalFileResourcesWatcher';\n\n/**\n * Use the Electron APIs to provide access to the native\n * file system (with native save/open dialogs).\n */\nexport default ({\n  internalName: 'LocalFile',\n  name: t`Your computer`,\n  renderIcon: props => <Computer fontSize={props.size} />,\n  getFileMetadataFromAppArguments: (appArguments: AppArguments) => {\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY]) return null;\n    if (!appArguments[POSITIONAL_ARGUMENTS_KEY].length) return null;\n\n    return {\n      fileIdentifier: appArguments[POSITIONAL_ARGUMENTS_KEY][0],\n    };\n  },\n  getProjectLocation: getProjectLocation,\n  renderNewProjectSaveAsLocationChooser: renderNewProjectSaveAsLocationChooser,\n  setupResourcesWatcher,\n  createOperations: () => ({\n    onOpenWithPicker,\n    onOpen,\n    getAutoSaveCreationDate,\n    onSaveProject,\n    onChooseSaveProjectAsLocation,\n    onSaveProjectAs,\n    onAutoSaveProject,\n    onGetAutoSave,\n    getOpenErrorMessage: (error: Error): MessageDescriptor => {\n      return t`Check that the file exists, that this file is a proper game created with GDevelop and that you have the authorization to open it.`;\n    },\n    getWriteErrorMessage,\n    canFileMetadataBeSafelySaved: async (\n      fileMetadata: FileMetadata,\n      actions: {|\n        showAlert: ShowAlertFunction,\n        showConfirmation: ShowConfirmFunction,\n      |}\n    ) => {\n      const path = fileMetadata.fileIdentifier;\n      if (isTryingToSaveInForbiddenPath(path)) {\n        await actions.showAlert({\n          title: t`Choose another location`,\n          message: t`Your project is saved in the same folder as the application. This folder will be deleted when the application is updated. Please choose another location if you don't want to lose your project.`,\n        });\n      }\n\n      // We don't block the save, in case the user wants to save anyway.\n      return true;\n    },\n    canFileMetadataBeSafelySavedAs: async (\n      fileMetadata: FileMetadata,\n      actions: {|\n        showAlert: ShowAlertFunction,\n        showConfirmation: ShowConfirmFunction,\n      |}\n    ) => {\n      const path = fileMetadata.fileIdentifier;\n      if (isTryingToSaveInForbiddenPath(path)) {\n        await actions.showAlert({\n          title: t`Choose another location`,\n          message: t`Your project is saved in the same folder as the application. This folder will be deleted when the application is updated. Please choose another location if you don't want to lose your project.`,\n        });\n\n        // We block the save as we don't want new projects to be saved there.\n        return false;\n      }\n\n      return true;\n    },\n  }),\n  createResourceOperations: () => ({\n    project,\n    resource,\n    i18n,\n    updateInterface,\n    cleanUserSelectionOfResources,\n    informUser,\n  }) => [\n    {\n      label: i18n._(t`Locate file`),\n      click: () => locateResourceFile({ project, resource }),\n    },\n    {\n      label: i18n._(t`Open file`),\n      click: () => openResourceFile({ project, resource }),\n    },\n    {\n      label: i18n._(t`Copy file path`),\n      click: () => {\n        copyResourceFilePath({ project, resource });\n        informUser({\n          message: <Trans>Resource file path copied to clipboard</Trans>,\n        });\n      },\n    },\n    { type: 'separator' },\n    {\n      label: i18n._(t`Scan in the project folder for...`),\n      submenu: allResourceKindsAndMetadata.map(\n        ({ displayName, fileExtensions, createNewResource }) => ({\n          label: i18n._(displayName),\n          click: async () => {\n            await scanForNewResources({\n              project,\n              extensions: fileExtensions,\n              createResource: createNewResource,\n            });\n            updateInterface();\n          },\n        })\n      ),\n    },\n    {\n      label: i18n._(t`Remove resources with invalid path`),\n      click: () => {\n        removeAllResourcesWithInvalidPath({ project });\n        // Remove user selection in case the user selected a resource\n        // that was just removed.\n        cleanUserSelectionOfResources();\n        // Force update of the resources list as otherwise it could render\n        // resources that were just deleted.\n        updateInterface();\n      },\n    },\n  ],\n}: StorageProvider);\n","// @flow\nimport * as React from 'react';\nimport optionalRequire from '../Utils/OptionalRequire';\nimport PreferencesContext from '../MainFrame/Preferences/PreferencesContext';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\n\n/**\n * Set up some watchers for GDJS and Extensions sources.\n * Stop the watchers when the component is unmounted or `shouldWatch` prop is false.\n */\nexport const LocalGDJSDevelopmentWatcher = () => {\n  const preferences = React.useContext(PreferencesContext);\n  const shouldWatch = preferences.values.useGDJSDevelopmentWatcher;\n\n  React.useEffect(\n    () => {\n      if (!shouldWatch) {\n        // Nothing to set up in the effect if watch is deactivated.\n        return;\n      }\n\n      if (!ipcRenderer) {\n        console.error(\n          'Unable to find ipcRenderer to set up GDJS development watchers'\n        );\n        return;\n      }\n\n      ipcRenderer.send('setup-local-gdjs-development-watcher');\n      return () => {\n        ipcRenderer.send('close-local-gdjs-development-watcher');\n      };\n    },\n    [shouldWatch]\n  );\n\n  return null;\n};\n","// @flow\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport PromisePool from '@supercharge/promise-pool';\nimport { retryIfFailed } from '../../Utils/RetryIfFailed';\nimport newNameGenerator from '../../Utils/NewNameGenerator';\nimport { type FileMetadata } from '../index';\nimport {\n  extractDecodedFilenameWithExtensionFromProductAuthorizedUrl,\n  fetchTokenForPrivateGameTemplateAuthorizationIfNeeded,\n  isPrivateGameTemplateResourceAuthorizedUrl,\n  isProductAuthorizedResourceUrl,\n} from '../../Utils/GDevelopServices/Shop';\nimport {\n  extractDecodedFilenameWithExtensionFromPublicAssetResourceUrl,\n  isPublicAssetResourceUrl,\n} from '../../Utils/GDevelopServices/Asset';\nimport {\n  isBlobURL,\n  isURL,\n  parseLocalFilePathOrExtensionFromMetadata,\n} from '../../ResourcesList/ResourceUtils';\nimport { sanitizeFilename } from '../../Utils/Filename';\nimport { type AuthenticatedUser } from '../../Profile/AuthenticatedUserContext';\nimport { extractDecodedFilenameFromProjectResourceUrl } from '../../Utils/GDevelopServices/Project';\nimport axios from 'axios';\nconst electron = optionalRequire('electron');\nconst ipcRenderer = electron ? electron.ipcRenderer : null;\nconst fs = optionalRequire('fs-extra');\nconst path = optionalRequire('path');\n\ntype Options = {|\n  project: gdProject,\n  fileMetadata: FileMetadata,\n  onProgress: (number, number) => void,\n  authenticatedUser: AuthenticatedUser,\n|};\n\nconst generateUnusedFilepath = (\n  basePath: string,\n  alreadyUsedFilePaths: Set<string>,\n  filename: string\n) => {\n  const extension = path.extname(filename);\n  const filenameWithoutExtension = path.basename(filename, extension);\n  const name = newNameGenerator(filenameWithoutExtension, name => {\n    const tentativePath = path.join(basePath, name) + extension;\n    return (\n      fs.existsSync(tentativePath) || alreadyUsedFilePaths.has(tentativePath)\n    );\n  });\n  return path.join(basePath, name) + extension;\n};\n\nconst downloadBlobToLocalFile = async (\n  blobUrl: string,\n  filePath: string\n): Promise<void> => {\n  if (!ipcRenderer) throw new Error('Not supported');\n\n  const response = await axios.get(blobUrl, {\n    responseType: 'arraybuffer',\n  });\n  const arrayBuffer = response.data;\n\n  await ipcRenderer.invoke(\n    'local-file-save-from-arraybuffer',\n    arrayBuffer,\n    filePath\n  );\n};\n\n// This mover can be used for both public URLs and Cloud project resources.\nexport const moveUrlResourcesToLocalFiles = async ({\n  project,\n  fileMetadata,\n  onProgress,\n  authenticatedUser,\n}: Options) => {\n  if (!fs || !ipcRenderer) throw new Error('Unsupported');\n\n  // Get all resources to download.\n  const resourcesManager = project.getResourcesManager();\n  const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n  const resourcesToFetchNames = allResourceNames.filter(resourceName => {\n    const resource = resourcesManager.getResource(resourceName);\n    const resourceFile = resource.getFile();\n    return isURL(resourceFile);\n  });\n  const tokenForPrivateGameTemplateAuthorization = await fetchTokenForPrivateGameTemplateAuthorizationIfNeeded(\n    {\n      authenticatedUser,\n      allResourcePaths: resourcesToFetchNames.map(resourceName => {\n        const resource = resourcesManager.getResource(resourceName);\n        return resource.getFile();\n      }),\n    }\n  );\n\n  const projectPath = path.dirname(fileMetadata.fileIdentifier);\n  const baseAssetsPath = path.join(projectPath, 'assets');\n  const downloadedFilePaths = new Set<string>();\n  const erroredResources = [];\n\n  let fetchedResourcesCount = 0;\n\n  await PromisePool.withConcurrency(50)\n    .for(resourcesToFetchNames) // It's important not to loop on allResourceNames, as calling the onProgress can be costly on the UI.\n    .process(async resourceName => {\n      const resource = resourcesManager.getResource(resourceName);\n\n      const resourceFile = resource.getFile();\n      if (isURL(resourceFile)) {\n        if (isBlobURL(resourceFile)) {\n          try {\n            const {\n              localFilePath,\n              extension,\n            } = parseLocalFilePathOrExtensionFromMetadata(resource);\n            const downloadedFilePath = localFilePath\n              ? path.resolve(projectPath, localFilePath)\n              : generateUnusedFilepath(\n                  baseAssetsPath,\n                  downloadedFilePaths,\n                  sanitizeFilename(resource.getName() + (extension || ''))\n                );\n\n            await fs.ensureDir(baseAssetsPath);\n            await downloadBlobToLocalFile(resourceFile, downloadedFilePath);\n            resource.setFile(\n              path.relative(projectPath, downloadedFilePath).replace(/\\\\/g, '/')\n            );\n          } catch (error) {\n            erroredResources.push({ resourceName, error });\n          }\n        } else {\n          let filename;\n          if (isProductAuthorizedResourceUrl(resourceFile)) {\n            // Resource is coming from a private asset or private game template.\n            filename = extractDecodedFilenameWithExtensionFromProductAuthorizedUrl(\n              resourceFile\n            );\n          } else if (isPublicAssetResourceUrl(resourceFile)) {\n            // Resource is coming from a public asset.\n            filename = extractDecodedFilenameWithExtensionFromPublicAssetResourceUrl(\n              resourceFile\n            );\n          } else {\n            // Resource is a project resource or a generic url.\n            filename = extractDecodedFilenameFromProjectResourceUrl(\n              resourceFile\n            );\n          }\n\n          // Find a new file for the resource to download.\n          const downloadedFilePath = generateUnusedFilepath(\n            baseAssetsPath,\n            downloadedFilePaths,\n            filename\n          );\n          downloadedFilePaths.add(downloadedFilePath);\n\n          try {\n            await retryIfFailed({ times: 2 }, async () => {\n              await fs.ensureDir(baseAssetsPath);\n              const resourceUrl = new URL(resourceFile);\n              if (\n                isPrivateGameTemplateResourceAuthorizedUrl(resourceUrl.href) &&\n                tokenForPrivateGameTemplateAuthorization\n              ) {\n                resourceUrl.searchParams.set(\n                  'token',\n                  tokenForPrivateGameTemplateAuthorization\n                );\n              }\n              const encodedUrl = resourceUrl.href; // Encode the URL to support special characters in file names.\n              await ipcRenderer.invoke(\n                'local-file-download',\n                encodedUrl,\n                downloadedFilePath\n              );\n              resource.setFile(\n                path\n                  .relative(projectPath, downloadedFilePath)\n                  .replace(/\\\\/g, '/')\n              );\n            });\n          } catch (error) {\n            erroredResources.push({ resourceName, error });\n          }\n        }\n      }\n\n      onProgress(fetchedResourcesCount++, resourcesToFetchNames.length);\n    });\n\n  return {\n    erroredResources,\n  };\n};\n","// @flow\n\nexport const processByChunk = async <Item, MappedItem>(\n  array: Array<Item>,\n  {\n    transformItem,\n    isChunkTooBig,\n    processChunk,\n  }: {|\n    transformItem: Item => Promise<MappedItem>,\n    isChunkTooBig: (MappedItem[]) => boolean,\n    processChunk: (MappedItem[]) => Promise<void>,\n  |}\n): Promise<void> => {\n  let currentItemIndex = 0;\n  const nextChunk: Array<MappedItem> = [];\n\n  while (currentItemIndex < array.length) {\n    const mappedItem = await transformItem(array[currentItemIndex]);\n\n    if (!nextChunk.length) {\n      // Existing chunk is empty - let the new item be added to it.\n    } else {\n      if (!isChunkTooBig([...nextChunk, mappedItem])) {\n        // Item can be added to the existing chunk - let's add it.\n      } else {\n        // Item can't be added to the existing chunk - process the existing chunk\n        await processChunk(nextChunk);\n        nextChunk.length = 0;\n      }\n    }\n\n    nextChunk.push(mappedItem);\n    currentItemIndex++;\n  }\n\n  if (nextChunk.length) {\n    await processChunk(nextChunk);\n    nextChunk.length = 0;\n  }\n\n  return;\n};\n","// @flow\r\nimport optionalRequire from './OptionalRequire';\r\nconst path = optionalRequire('path');\r\nconst fs = optionalRequire('fs');\r\n\r\nconst readLocalFileToArrayBuffer = async (\r\n  filePath: string\r\n): Promise<ArrayBuffer> => {\r\n  const buffer: Buffer = await new Promise((resolve, reject) => {\r\n    fs.readFile(filePath, function(err, buffer) {\r\n      if (err) {\r\n        reject(err);\r\n        return;\r\n      }\r\n\r\n      resolve(buffer);\r\n    });\r\n  });\r\n\r\n  // See https://stackoverflow.com/questions/8609289/convert-a-binary-nodejs-buffer-to-javascript-arraybuffer:\r\n  // The slice and offset stuff is required because small Buffers (less than 4 kB by default, half the pool size)\r\n  // can be views on a shared ArrayBuffer. Without slicing, you can end up with an ArrayBuffer containing data from another Buffer.\r\n  const arrayBuffer = buffer.buffer.slice(\r\n    buffer.byteOffset,\r\n    buffer.byteOffset + buffer.byteLength\r\n  );\r\n  return arrayBuffer;\r\n};\r\n\r\n// See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types.\r\nconst extensionToMimeType = {\r\n  // Common audio extensions:\r\n  aac: 'audio/aac',\r\n  wav: 'audio/wav',\r\n  mp3: 'audio/mp3',\r\n  ogg: 'audio/ogg',\r\n\r\n  // Common image extensions:\r\n  png: 'image/png',\r\n  jpg: 'image/jpeg',\r\n  jpeg: 'image/jpeg',\r\n  webp: 'image/webp',\r\n\r\n  // Common font extensions:\r\n  ttf: 'font/ttf',\r\n  otf: 'font/otf',\r\n\r\n  // Common video extensions:\r\n  mp4: 'video/mp4',\r\n  webm: 'video/webm',\r\n\r\n  // Other common extensions:\r\n  json: 'application/json',\r\n  xml: 'application/xml',\r\n  gz: 'application/gzip',\r\n  js: 'application/javascript',\r\n};\r\n\r\nexport const readLocalFileToFile = async (filePath: string): Promise<File> => {\r\n  const arrayBuffer = await readLocalFileToArrayBuffer(filePath);\r\n  const extensionWithoutLeadingDot = path.extname(filePath).replace(/^\\./, '');\r\n  return new File([arrayBuffer], path.basename(filePath), {\r\n    type:\r\n      extensionToMimeType[extensionWithoutLeadingDot] ||\r\n      'application/octet-stream',\r\n  });\r\n};\r\n","// @flow\nimport {\n  type MoveAllProjectResourcesOptions,\n  type MoveAllProjectResourcesResult,\n  type MoveAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport LocalFileSystem from '../../ExportAndShare/LocalExporters/LocalFileSystem';\nimport assignIn from 'lodash/assignIn';\nimport optionalRequire from '../../Utils/OptionalRequire';\nimport { moveUrlResourcesToCloudProject } from '../CloudStorageProvider/CloudResourceMover';\nimport { checkIfIsGDevelopCloudBucketUrl } from '../../Utils/CrossOrigin';\nimport {\n  getCredentialsForCloudProject,\n  uploadProjectResourceFiles,\n  type UploadedProjectResourceFiles,\n} from '../../Utils/GDevelopServices/Project';\nimport { processByChunk } from '../../Utils/ProcessByChunk';\nimport { readLocalFileToFile } from '../../Utils/LocalFileUploader';\nimport { isURL, isBlobURL } from '../../ResourcesList/ResourceUtils';\nconst path = optionalRequire('path');\n\nconst gd: libGDevelop = global.gd;\n\ntype ResourceAndFile = {|\n  resource: gdResource,\n  file: File,\n|};\n\nexport const moveAllLocalResourcesToCloudResources = async ({\n  project,\n  authenticatedUser,\n  oldFileMetadata,\n  newFileMetadata,\n  onProgress,\n}: MoveAllProjectResourcesOptions): Promise<MoveAllProjectResourcesResult> => {\n  const result: MoveAllProjectResourcesResult = {\n    erroredResources: [],\n  };\n\n  const newCloudProjectId = newFileMetadata.fileIdentifier;\n\n  const resourcesManager = project.getResourcesManager();\n\n  /**\n   * Find the local resources that must be\n   * uploaded into the new project.\n   */\n  const getResourcesToUpload = (project: gdProject): Array<gdResource> => {\n    const allResourceNames = resourcesManager.getAllResourceNames().toJSArray();\n    return allResourceNames\n      .map(\n        (resourceName: string): ?gdResource => {\n          const resource = resourcesManager.getResource(resourceName);\n          const resourceFile = resource.getFile();\n\n          if (isURL(resourceFile)) {\n            if (checkIfIsGDevelopCloudBucketUrl(resourceFile)) {\n              // URL from a cloud project: this is unlikely and would not work\n              // (as the project is a local project). Still, ignore this.\n              return null;\n            } else if (isBlobURL(resourceFile)) {\n              result.erroredResources.push({\n                resourceName: resource.getName(),\n                error: new Error('Unsupported blob URL.'),\n              });\n              return null;\n            } else {\n              // Public URL resource: nothing to do.\n              return null;\n            }\n          } else {\n            // Local resource to be downloaded.\n            return resource;\n          }\n        }\n      )\n      .filter(Boolean);\n  };\n\n  const allResourcesToUpload = getResourcesToUpload(project);\n\n  const projectPath = path.dirname(oldFileMetadata.fileIdentifier);\n\n  let alreadyDoneCount = 0;\n  // Read all files as Files.\n  await processByChunk(allResourcesToUpload, {\n    transformItem: async (resource): Promise<ResourceAndFile | null> => {\n      const resourceAbsolutePath = path.resolve(\n        projectPath,\n        resource.getFile()\n      );\n\n      try {\n        const file = await readLocalFileToFile(resourceAbsolutePath);\n        return {\n          resource,\n          file,\n        };\n      } catch (error) {\n        result.erroredResources.push({\n          resourceName: resource.getName(),\n          error: new Error(\n            `Unable to open the file (${resourceAbsolutePath}).`\n          ),\n        });\n        return null;\n      }\n    },\n    isChunkTooBig: (resourceAndFilesChunk: Array<ResourceAndFile | null>) => {\n      if (resourceAndFilesChunk.length > 70) return true;\n\n      const allBufferSize = resourceAndFilesChunk\n        .filter(Boolean)\n        .reduce((size, { file }) => size + file.size, 0);\n\n      // Stop a chunk when more than 150MB are read to be uploaded. This is\n      // to avoid loading all resources in memory at once. This don't give an exact\n      // guarantee on the upper bound (a single file could be more than 150MB), but\n      // this limits the risks of running out of memory.\n      return allBufferSize > 150 * 1000 * 1000;\n    },\n    processChunk: async (\n      resourceAndFilesChunk: Array<ResourceAndFile | null>\n    ) => {\n      const resourceAndFilesToUpload: ResourceAndFile[] = resourceAndFilesChunk.filter(\n        Boolean\n      );\n\n      // Upload the files just read, for the new project.\n      await getCredentialsForCloudProject(authenticatedUser, newCloudProjectId);\n      const uploadedProjectResourceFiles: UploadedProjectResourceFiles = await uploadProjectResourceFiles(\n        authenticatedUser,\n        newCloudProjectId,\n        resourceAndFilesToUpload.map(({ file }) => file),\n        (count, total) => {\n          onProgress(alreadyDoneCount + count, allResourcesToUpload.length);\n        }\n      );\n      alreadyDoneCount += resourceAndFilesChunk.length;\n\n      // Update resources with the newly created URLs.\n      uploadedProjectResourceFiles.forEach(({ url, error }, index) => {\n        const resource = resourceAndFilesToUpload[index].resource;\n        if (error || !url) {\n          result.erroredResources.push({\n            resourceName: resource.getName(),\n            error: error || new Error('Unknown error during upload.'),\n          });\n          return;\n        }\n\n        resource.setFile(url);\n      });\n    },\n  });\n\n  return result;\n};\n\nconst movers: {\n  [string]: MoveAllProjectResourcesFunction,\n} = {\n  [`${LocalFileStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: async ({ project, newFileMetadata }: MoveAllProjectResourcesOptions) => {\n    // TODO: Ideally, errors while copying resources should be reported.\n    // TODO: Report progress.\n    const projectPath = path.dirname(newFileMetadata.fileIdentifier);\n    const fileSystem = assignIn(\n      new gd.AbstractFileSystemJS(),\n      new LocalFileSystem()\n    );\n    gd.ProjectResourcesCopier.copyAllResourcesTo(\n      project,\n      // $FlowFixMe - fileSystem is a gdAbstractFileSystem, despite the assignIn.\n      fileSystem,\n      projectPath,\n      true, // Update the project with the new resource paths\n      false, // Don't move absolute files\n      true // Keep relative files folders structure.\n    );\n    return {\n      erroredResources: [],\n    };\n  },\n  // When saving a Cloud project locally, all resources are downloaded (including\n  // the ones on GDevelop Cloud or private game templates).\n  [`${CloudStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress, authenticatedUser }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n      authenticatedUser,\n    }),\n  // On the desktop app, try to download all URLs into local files, put\n  // next to the project file (in a \"assets\" directory). This is helpful\n  // to continue working on a game started on the web-app (using public URLs\n  // for resources).\n  // This is also helpful to download private game templates resources so that\n  // the game can be opened offline.\n  [`${UrlStorageProvider.internalName}=>${\n    LocalFileStorageProvider.internalName\n  }`]: ({ project, newFileMetadata, onProgress, authenticatedUser }) =>\n    moveUrlResourcesToLocalFiles({\n      project,\n      fileMetadata: newFileMetadata,\n      onProgress,\n      authenticatedUser,\n    }),\n\n  // Moving to GDevelop \"Cloud\" storage:\n\n  // From a local project to a Cloud project, all resources are uploaded.\n  [`${LocalFileStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveAllLocalResourcesToCloudResources,\n  // From a Cloud project to another, resources need to be copied\n  // (unless they are public URLs).\n  [`${CloudStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveUrlResourcesToCloudProject,\n  // Nothing to move around when going from a project on a public URL\n  // to a cloud project (we could offer an option one day though to download\n  // and upload the URL resources on GDevelop Cloud).\n  [`${UrlStorageProvider.internalName}=>${\n    CloudStorageProvider.internalName\n  }`]: moveUrlResourcesToCloudProject,\n};\n\nconst LocalResourceMover = {\n  moveAllProjectResources: async (\n    options: MoveAllProjectResourcesOptions\n  ): Promise<MoveAllProjectResourcesResult> => {\n    const { oldStorageProvider, newStorageProvider } = options;\n    const mover =\n      movers[\n        `${oldStorageProvider.internalName}=>${newStorageProvider.internalName}`\n      ];\n    if (!mover)\n      throw new Error(\n        `Can't find a ResourceMover for ${oldStorageProvider.internalName} to ${\n          newStorageProvider.internalName\n        }.`\n      );\n\n    return mover(options);\n  },\n};\n\nexport default LocalResourceMover;\n","// @flow\nimport {\n  type ResourceFetcher,\n  type FetchAllProjectResourcesOptions,\n  type FetchAllProjectResourcesResult,\n  type FetchAllProjectResourcesFunction,\n} from './index';\nimport LocalFileStorageProvider from '../LocalFileStorageProvider';\nimport { moveUrlResourcesToLocalFiles } from '../LocalFileStorageProvider/LocalFileResourceMover';\nimport UrlStorageProvider from '../UrlStorageProvider';\nimport CloudStorageProvider from '../CloudStorageProvider';\nimport { fetchRelativeResourcesToFullUrls } from '../UrlStorageProvider/UrlResourceFetcher';\nimport { moveUrlResourcesToCloudFilesIfPrivate } from '../CloudStorageProvider/CloudResourceFetcher';\n\nconst fetchers: {\n  [string]: FetchAllProjectResourcesFunction,\n} = {\n  // The Cloud file storage provider fetches the resources that are\n  // private URLs by downloading them and reuploading them to the cloud.\n  [CloudStorageProvider.internalName]: moveUrlResourcesToCloudFilesIfPrivate,\n  // The local file storage provider fetches the resources that are URLs\n  // by downloading them locally.\n  [LocalFileStorageProvider.internalName]: moveUrlResourcesToLocalFiles,\n  // The URL storage consider relative resources to be relative to the project\n  // URL. This allows to open local projects uploaded to GitHub for example.\n  [UrlStorageProvider.internalName]: fetchRelativeResourcesToFullUrls,\n};\n\nconst LocalResourceFetcher: ResourceFetcher = {\n  fetchAllProjectResources: async (\n    options: FetchAllProjectResourcesOptions\n  ): Promise<FetchAllProjectResourcesResult> => {\n    const { storageProvider } = options;\n    const fetcher = fetchers[storageProvider.internalName];\n    if (!fetcher)\n      throw new Error(\n        `Can't find a ResourceFetcher for ${\n          storageProvider.internalName\n        } - have you registered the storage provider here?`\n      );\n\n    return fetcher(options);\n  },\n};\n\nexport default LocalResourceFetcher;\n","// @flow\nimport {\n  signInWithEmailAndPassword,\n  type Auth,\n  signInWithCredential,\n  GoogleAuthProvider,\n  OAuthProvider,\n  GithubAuthProvider,\n} from 'firebase/auth';\nimport type { LoginProvider, FirebaseBasedLoginProvider } from '.';\nimport type { IdentityProvider } from '../Utils/GDevelopServices/Authentication';\nimport {\n  setupAuthenticationWebSocket,\n  terminateWebSocket,\n} from '../Utils/GDevelopServices/Authorization';\nimport Window from '../Utils/Window';\nimport { UserCancellationError } from './Utils';\n\nconst isDev = Window.isDev();\n\nconst authenticationPortalUrl = 'https://auth.gdevelop.io';\n\nclass LocalLoginProvider implements LoginProvider, FirebaseBasedLoginProvider {\n  auth: Auth;\n  constructor(auth: Auth) {\n    this.auth = auth;\n  }\n\n  async loginWithEmailAndPassword({\n    email,\n    password,\n  }: {|\n    email: string,\n    password: string,\n  |}) {\n    try {\n      await signInWithEmailAndPassword(this.auth, email, password);\n      // The user is now stored in `this.auth`.\n    } catch (error) {\n      console.error('Error while login:', error);\n      throw error;\n    }\n  }\n\n  async loginOrSignupWithProvider({\n    provider,\n    signal,\n  }: {|\n    provider: IdentityProvider,\n    signal?: AbortSignal,\n  |}) {\n    if (signal && signal.aborted) {\n      return Promise.reject(\n        new UserCancellationError(\n          'Login or Signup with provider already aborted.'\n        )\n      );\n    }\n    const promise = new Promise((resolve, reject) => {\n      // Listen for abort event on signal\n      if (signal) {\n        signal.addEventListener('abort', () => {\n          terminateWebSocket();\n          reject(\n            new UserCancellationError(\n              'Login or Signup with provider already aborted.'\n            )\n          );\n        });\n      }\n      setupAuthenticationWebSocket({\n        onConnectionEstablished: connectionId => {\n          if (signal && signal.aborted) return;\n          const url = new URL(authenticationPortalUrl);\n          url.searchParams.set('connection-id', connectionId);\n          url.searchParams.set('provider', provider);\n          url.searchParams.set('env', isDev ? 'dev' : 'live');\n          Window.openExternalURL(url.toString());\n        },\n        onTokenReceived: async ({\n          provider,\n          data,\n        }: {|\n          provider: 'apple' | 'google' | 'github',\n          data: any,\n        |}) => {\n          if (signal && signal.aborted) return;\n          try {\n            const credential =\n              provider === 'google'\n                ? GoogleAuthProvider.credential(data.credential)\n                : provider === 'github'\n                ? GithubAuthProvider.credential(data.accessToken)\n                : new OAuthProvider('apple.com').credential({\n                    idToken: data.id_token,\n                    // Typescript types declaration indicates the parameter `rawNonce` should be\n                    // set but it only works with `nonce`.\n                    nonce: data.raw_nonce,\n                  });\n            await signInWithCredential(this.auth, credential);\n            resolve();\n            terminateWebSocket();\n          } catch (error) {\n            console.error(\n              `An error occurred while logging in with ${provider} token:`,\n              error\n            );\n            reject(error);\n          }\n        },\n        onError: error => {\n          if (signal && signal.aborted) return;\n          terminateWebSocket();\n          console.error(\n            'An error occurred while setting up authentication web socket:',\n            error\n          );\n          reject(\n            new Error(\n              'An error occurred while setting up authentication web socket.'\n            )\n          );\n        },\n        onTimeout: () => {\n          if (signal && signal.aborted) return;\n          terminateWebSocket();\n          console.error('Connection to authorization websocket timed out.');\n          reject(new Error('Connection to authorization websocket timed out.'));\n        },\n      });\n    });\n    return promise;\n  }\n}\n\nexport default LocalLoginProvider;\n","// @flow\nimport React from 'react';\nimport MainFrame from './MainFrame';\nimport Window from './Utils/Window';\nimport ShareDialog from './ExportAndShare/ShareDialog';\nimport Authentication from './Utils/GDevelopServices/Authentication';\nimport './UI/icomoon-font.css'; // Styles for Icomoon font.\n\n// Import for Electron powered IDE.\nimport localResourceSources from './ResourcesList/LocalResourceSources';\nimport localResourceExternalEditors from './ResourcesList/LocalResourceExternalEditors';\nimport LocalPreviewLauncher from './ExportAndShare/LocalExporters/LocalPreviewLauncher';\nimport {\n  localAutomatedExporters,\n  localManualExporters,\n  localOnlineWebExporter,\n} from './ExportAndShare/LocalExporters';\nimport ElectronMainMenu from './MainFrame/ElectronMainMenu';\nimport makeExtensionsLoader from './JsExtensionsLoader/LocalJsExtensionsLoader';\nimport { makeLocalEventsFunctionCodeWriter } from './EventsFunctionsExtensionsLoader/CodeWriters/LocalEventsFunctionCodeWriter';\nimport ObjectsEditorService from './ObjectEditor/ObjectsEditorService';\nimport ObjectsRenderingService from './ObjectsRendering/ObjectsRenderingService';\nimport Providers from './MainFrame/Providers';\nimport LocalEventsFunctionsExtensionWriter from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionWriter';\nimport LocalEventsFunctionsExtensionOpener from './EventsFunctionsExtensionsLoader/Storage/LocalEventsFunctionsExtensionOpener';\nimport ProjectStorageProviders from './ProjectsStorage/ProjectStorageProviders';\nimport LocalFileStorageProvider from './ProjectsStorage/LocalFileStorageProvider';\nimport { LocalGDJSDevelopmentWatcher } from './GameEngineFinder/LocalGDJSDevelopmentWatcher';\nimport CloudStorageProvider from './ProjectsStorage/CloudStorageProvider';\nimport UrlStorageProvider from './ProjectsStorage/UrlStorageProvider';\nimport LocalResourceMover from './ProjectsStorage/ResourceMover/LocalResourceMover';\nimport LocalResourceFetcher from './ProjectsStorage/ResourceFetcher/LocalResourceFetcher';\nimport LocalLoginProvider from './LoginProvider/LocalLoginProvider';\n\nconst gd: libGDevelop = global.gd;\n\nexport const create = (authentication: Authentication) => {\n  Window.setUpContextMenu();\n  const loginProvider = new LocalLoginProvider(authentication.auth);\n  authentication.setLoginProvider(loginProvider);\n\n  const appArguments = Window.getArguments();\n  const isDev = Window.isDev();\n\n  return (\n    <Providers\n      authentication={authentication}\n      disableCheckForUpdates={!!appArguments['disable-update-check']}\n      makeEventsFunctionCodeWriter={makeLocalEventsFunctionCodeWriter}\n      eventsFunctionsExtensionWriter={LocalEventsFunctionsExtensionWriter}\n      eventsFunctionsExtensionOpener={LocalEventsFunctionsExtensionOpener}\n    >\n      {({ i18n }) => (\n        <ProjectStorageProviders\n          appArguments={appArguments}\n          storageProviders={[\n            LocalFileStorageProvider,\n            UrlStorageProvider,\n            CloudStorageProvider,\n          ]}\n          defaultStorageProvider={LocalFileStorageProvider}\n        >\n          {({\n            getStorageProviderOperations,\n            getStorageProviderResourceOperations,\n            storageProviders,\n            initialFileMetadataToOpen,\n            getStorageProvider,\n          }) => (\n            <MainFrame\n              i18n={i18n}\n              renderMainMenu={(props, callbacks, extraCallbacks) => (\n                <ElectronMainMenu\n                  props={props}\n                  callbacks={callbacks}\n                  extraCallbacks={extraCallbacks}\n                />\n              )}\n              renderPreviewLauncher={(props, ref) => (\n                <LocalPreviewLauncher {...props} ref={ref} />\n              )}\n              renderShareDialog={props => (\n                <ShareDialog\n                  project={props.project}\n                  onSaveProject={props.onSaveProject}\n                  isSavingProject={props.isSavingProject}\n                  onChangeSubscription={props.onChangeSubscription}\n                  onClose={props.onClose}\n                  automatedExporters={localAutomatedExporters}\n                  manualExporters={localManualExporters}\n                  onlineWebExporter={localOnlineWebExporter}\n                  fileMetadata={props.fileMetadata}\n                  storageProvider={props.storageProvider}\n                  initialTab={props.initialTab}\n                />\n              )}\n              renderGDJSDevelopmentWatcher={\n                isDev ? () => <LocalGDJSDevelopmentWatcher /> : null\n              }\n              storageProviders={storageProviders}\n              resourceMover={LocalResourceMover}\n              resourceFetcher={LocalResourceFetcher}\n              getStorageProviderOperations={getStorageProviderOperations}\n              getStorageProviderResourceOperations={\n                getStorageProviderResourceOperations\n              }\n              getStorageProvider={getStorageProvider}\n              resourceSources={localResourceSources}\n              resourceExternalEditors={localResourceExternalEditors}\n              extensionsLoader={makeExtensionsLoader({\n                gd,\n                objectsEditorService: ObjectsEditorService,\n                objectsRenderingService: ObjectsRenderingService,\n                filterExamples: !isDev,\n              })}\n              initialFileMetadataToOpen={initialFileMetadataToOpen}\n            />\n          )}\n        </ProjectStorageProviders>\n      )}\n    </Providers>\n  );\n};\n"],"names":["findGDJS","require","optionalRequire","path","fs","module","exports","findJsExtensionModules","_ref","filterExamples","onFindGDJS","then","_ref2","gdjsRoot","extensionsRoot","join","console","info","concat","Promise","resolve","reject","readdir","error","extensionFolders","filteredExtensionFolders","filter","folder","indexOf","all","map","extensionFolder","extensionFolderPath","jsExtensionModulePath","stat","err","stats","isFile","modulePaths","modulePath","loadExtension","gd","objectsEditorService","objectsRenderingService","loadAllExtensions","_","extensionModulePaths","extensionModulePath","extensionModule","rethrowException","ex","result","message","rawError","registerEditorConfigurations","registerInstanceRenderers","registerClearCache","JsPlatform","get","copyAllEmbeddedResourcesToProjectFolder","_x","_x2","_copyAllEmbeddedResourcesToProjectFolder","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","project","filesWithEmbeddedResources","projectPath","copies","_iterator3","_step3","_step3$value","hasAnyEmbeddedResourceOutsideProjectFolder","embeddedResources","_iterator4","_step4","_loop","wrap","_context2","prev","next","abrupt","dirname","getProjectFile","_createForOfIteratorHelper","values","s","n","done","value","embedded","resourceBasename","fileExtension","fileNameWithoutExtension","newFileNameWithoutExtension","resourceNewPath","_context","isOutsideProjectFolder","basename","fullPath","extname","newNameGenerator","tentativeFileName","tentativePath","existsSync","resourceName","push","promises","copyFile","stop","delegateYield","t0","t1","e","f","finish","t2","createAndMapEmbeddedResources","_step","filesWithMappedResources","Map","_iterator","_step2","_step$value","_slicedToArray","filePath","mapping","_iterator2","_step2$value","resourceKind","relPath","relative","theEmbeddedResource","createNewResource","setName","setFile","has","mappedResources","setMetadata","JSON","stringify","embeddedResourcesMapping","delete","getResourcesManager","addResource","set","listTileMapEmbeddedResources","_x3","_x4","_listTileMapEmbeddedResources","_callee2","data","tileMap","dir","_iterator5","_step5","tileset","resource","_iterator6","_step6","level","_relPath","_fullPath","_isOutsideProjectFolder","_resource","_context3","readFile","sent","parse","__header__","app","defs","tilesets","isPathInProjectFolder","levels","bgRelPath","_listSpineEmbeddedResources","_callee3","atlasPath","atlasFileName","_context4","replace","access","constants","F_OK","catch","_listSpineTextureAtlasEmbeddedResources","_callee4","atlasContent","atlasImageRegex","imageDependencies","_iterator7","_step7","relatedImagePath","_context5","match","embeddedResourcesParsers","tilemap","json","spine","_x5","_x6","atlas","_x7","_x8","remote","dialog","ResourceStoreChooser","options","onChooseResources","_jsx","ResourceStore","onChoose","chosenResourceUrl","url","newResource","setOrigin","localResourceSources","_toConsumableArray","allResourceKindsAndMetadata","kind","fileExtensions","displayName","selectLocalFileResources","_ref4","_ref3","i18n","getLastUsedPath","setLastUsedPath","resourcesImporationBehavior","properties","latestPath","browserWindow","_yield$dialog$showOpe","filePaths","lastUsedPath","hasFilesOutsideProjectFolder","parseEmbeddedResources","recursivelyParseEmbeddedResources","newToOldFilePaths","Error","multiSelection","getCurrentWindow","showOpenDialog","title","id","filters","name","extensions","defaultPath","length","some","_ref5","initialEmbeddedResources","initialEmbeddedResource","embeddedResourseParser","newDependentResources","Window","showConfirmDialog","copyAllToProjectFolder","filePathWithMapping","displayTab","onlyForStorageProvider","selectResourcesHeadless","renderComponent","props","Line","justifyContent","children","RaisedButton","primary","label","Trans","onClick","resources","fileMetadata","getStorageProvider","_ref7","FileToCloudProjectResourceUploader","automaticallyOpenInput","automaticallyOpenIfPossible","_ref8","electron","ipcRenderer","openAndWaitForExternalEditorWindow","editorName","externalEditorInput","externalEditorOutput","invoke","downloadAndPrepareExternalEditorBase64Resources","resourceNames","urlsToDownload","filesToRead","resourcesManager","downloadedBlobs","resourcesToDataUrl","forEach","hasResource","getResource","getFile","isURL","isBlobURL","localFilePath","downloadUrlsToBlobs","urlContainers","onProgress","count","total","blob","item","convertBlobToDataURL","t3","dataUrl","call","t4","_ref6","content","toString","resourceData","editWithLocalExternalEditor","_ref9","_callee5","externalEditorName","defaultName","metadataKey","resourceManagementProps","modifiedResources","singleFrame","extraOptions","externalEditorData","readMetadata","existingMetadata","fps","isLooping","sendExternalEditorOpened","saveBlobUrlsFromExternalEditorBase64Resources","baseNameForNewResources","onFetchNewlyAddedResources","freeBlobsAndUpdateMetadata","metadata","patchExternalEditorMetadataWithResourcesNamesIfNecessary","_ref10","getName","_ref11","originalIndex","newName","newMetadata","_defineProperty","editors","createDisplayName","editDisplayName","edit","_edit","_callee6","_context6","_edit2","_callee7","_context7","_edit3","_callee8","_context8","_x9","os","getUID","userInfo","uid","global","pathPosix","posix","LocalFileSystem","_createClass","_this","_classCallCheck","_filesToDownload","getAllUrlFilesIn","pathPrefix","normalizedPathPrefix","normalize","Object","keys","mkDir","mkdirsSync","dirExists","clearDir","emptyDirSync","getTempDir","tmpdir","fileNameFrom","_downloadUrlsToLocalFiles","dirNameFrom","makeAbsolute","filename","baseDirectory","isAbsolute","makeRelative","charAt","source","dest","copySync","writeToFile","file","contents","outputFileSync","readFileSync","readDir","ext","toUpperCase","output","VectorString","readdirSync","push_back","fileExists","normalizedFilePath","statSync","this","downloadUrlsToLocalFiles","open","onExport","onClose","onRunPreviewLocally","isMobile","useResponsiveWindowSize","urlWithProtocol","_jsxs","Dialog","actions","FlatButton","secondaryActions","onRequestClose","maxWidth","Text","PlaceholderLoader","ShareLink","_Fragment","QrCode","size","debuggerServerState","debuggerServerAddress","callbacksList","debuggerIds","localPreviewDebuggerServer","startServer","serverStartPromise","serverStartPromiseCompleted","removeAllListeners","on","event","onErrorReceived","debuggerIdIndex","splice","onConnectionClosed","onConnectionOpened","errorMessage","onConnectionErrored","address","onServerStateChanged","parsedMessage","onHandleParsedMessage","warn","send","serverStartTimeoutPromise","setTimeout","race","sendMessage","getServerState","getExistingDebuggerIds","registerCallbacks","callbacks","callbacksIndex","LocalPreviewLauncher","_React$Component","_inherits","_super","_createSuper","_len","args","Array","_key","canDoNetworkPreview","canDoHotReload","state","networkPreviewDialogOpen","networkPreviewHost","networkPreviewPort","networkPreviewError","previewGamePath","previewBrowserWindowOptions","hotReloadsCount","hideMenuBar","alwaysOnTop","numberOfWindows","_networkPreviewSubscriptionChecker","_hotReloadSubscriptionChecker","_openPreviewBrowserWindow","_this$state","previewGameIndexHtmlPath","closePreview","windowId","_openPreviewWindow","gamePath","setState","width","getGameResolutionWidth","height","getGameResolutionHeight","useContentSize","backgroundColor","webPreferences","webSecurity","nodeIntegration","contextIsolation","getIsMenuBarHiddenInPreview","getIsAlwaysOnTopInPreview","networkPreview","serverParams","port","_checkSubscriptionForNetworkPreview","ipAddress","root","_prepareExporter","localFileSystem","fileSystem","assignIn","AbstractFileSystemJS","outputDir","exporter","Exporter","launchPreview","previewOptions","layout","externalLayout","getPreviewDebuggerServer","fn","onResult","performance","now","timeFunction","previewExportOptions","PreviewExportOptions","setIsDevelopmentEnvironment","isDev","setLayoutName","setExternalLayoutName","previewDebuggerServerAddress","useWebsocketDebuggerClientWithServerAddress","includeFileHashs","getIncludeFileHashs","includeFile","hash","setIncludeFileHash","setElectronRemoteRequirePath","shouldHotReload","hotReload","setProjectDataOnlyExport","projectDataOnlyExport","setFullLoadingScreen","fullLoadingScreen","fallbackAuthor","setFallbackAuthor","username","exportProjectForPixiPreview","debuggerId","command","checkUserHasSubscription","time","key","_this2","_this$state2","React","SubscriptionChecker","ref","subscriptionChecker","onChangeSubscription","mode","LocalNetworkPreviewDialog","shell","exportPipelineName","localCordovaExportPipeline","packageNameWarningType","getInitialExportState","getLastCompilationDirectory","canLaunchBuild","exportState","isNavigationDisabled","renderHeader","updateExportState","exportStep","Column","noMargin","ExplanationHeader","LocalFolderPicker","type","onChange","setLastCompilationDirectory","fullWidth","renderExportFlow","ExportFlow","_objectSpread","prepareExporter","context","launchExport","_launchExport","exportOptions","ExportOptions","setTarget","exportWholePixiProject","urlFiles","launchResourcesDownload","_launchResourcesDownload","updateStepProgress","throwIfAnyError","launchCompression","exportOutput","renderDoneFooter","openExportFolder","openPath","DoneFooter","renderGameButton","localElectronExportPipeline","expand","localHTML5ExportPipeline","renderTutorial","DismissableTutorialMessage","tutorialId","styles","container","position","display","alignItems","button","marginLeft","textField","flex","onChooseFolder","_yield$dialog$showSav","showSaveDialog","style","undefined","TextField","margin","translatableHintText","optionalLazyRequire","moduleName","moduleLoaded","lazyRequireArchiver","archiveLocalFolder","outputFilename","sizeLimit","archiver","createWriteStream","archive","zlib","fileSize","pointer","log","roundFileSizeInMb","Math","round","pipe","directory","finalize","localFacebookInstantGamesExportPipeline","archiveOutputFilename","getPath","LocalFilePicker","temporaryOutputDir","uploadLocalFile","uploadOptions","stepCurrentProgress","stepMaxProgress","localOnlineCordovaExportPipeline","onlineBuildType","limitedBuilds","targets","keystore","signingDialogOpen","errored","includes","SetupExportHeader","shouldSuggestBumpingVersionNumber","archiveOutputDir","launchUpload","outputFile","getBuildFileUploadOptions","launchOnlineBuild","authenticatedUser","uploadBucketKey","gameId","payWithCredits","getAuthorizationHeader","firebaseUser","buildCordovaAndroid","localOnlineCordovaIosExportPipeline","signing","profile","buildCordovaIos","localOnlineElectronExportPipeline","buildElectron","localOnlineWebExportPipeline","OnlineWebExportFlow","buildWeb","localOnlineWebExporter","onlineWebExporter","exportPipeline","localAutomatedExporters","html5Exporter","onlineCordovaExporter","onlineCordovaIosExporter","onlineElectronExporter","facebookInstantGamesExporter","localManualExporters","cordovaExporter","electronExporter","useIPCEventListener","ipcEvent","callback","shouldApply","handler","eventArgs","removeListener","useAppEventListener","_len2","_key2","isMainWindow","windowTitle","lowercaseTitle","toLowerCase","startsWith","extraCallbacks","canSaveProjectAs","recentProjectFiles","shortcutMap","isApplicationTopLevelMenu","onClosePreview","language","_React$useState","_React$useState2","isFocusedOnMainWindow","setIsFocusedOnMainWindow","_React$useState3","_React$useState4","focusedWindowId","setFocusedWindowId","closePreviewWindow","useShortcutToClosePreviewWindow","PreferencesContext","window","onChooseProject","onOpenRecentFile","onSaveProject","onSaveProjectAs","onShowVersionHistory","onCloseProject","onCloseApp","onExportProject","onInviteCollaborators","onCreateProject","onCreateBlank","onOpenProjectManager","onOpenHomePage","onOpenDebugger","onOpenAbout","onOpenPreferences","onOpenLanguage","onOpenProfile","setElectronUpdateStatus","buildMainMenuDeclarativeTemplate","useCommandWithOptions","generateOptions","text","fileIdentifier","makeLocalEventsFunctionCodeWriter","onWriteFile","mkdir","code","getPathFor","codeNamespace","slugs","getIncludeFileFor","writeFunctionCode","functionCodeNamespace","writeFile","writeBehaviorCode","behaviorCodeNamespace","writeObjectCode","objectCodeNamespace","LocalEventsFunctionsExtensionWriter","chooseEventsFunctionExtensionFile","extensionName","writeEventsFunctionsExtension","extension","filepath","object","ensureDir","stringifyException","writeJSONFile","serializeToJSObject","LocalEventsFunctionsExtensionOpener","openFilePicker","readEventsFunctionExtensionFile","readJSONFile","unsplit","isReferenceMagicPropertyName","getReferencePartialObject","maxUnsplitDepth","unsplitObject","currentObject","depth","indexOrPropertyName","reference","isReference","referenceTo","partialObject","getSlugifiedUniqueNameFromProperty","propertyName","existingNamesForReference","currentReference","property","onOpenWithPicker","onOpen","referencePath","getAutoSaveCreationDate","compareLastModified","autoSavePath","autoSavedTime","saveTime","mtime","getTime","onGetAutoSave","splittedProjectFolderNames","deleteExistingFilesFromDirs","isFolderProject","entry","dirPath","isDirectory","fileToRemovePath","unlinkSync","checkFileContent","expectedContent","encoding","verificationTime","toFixed","writeAndCheckFile","writeAndCheckFormattedJSONFile","writeProjectFiles","paths","serializedProjectObject","partialObjects","pathSeparator","getArrayItemReferenceName","shouldSplit","createReference","splitObject","currentPath","isArray","index","itemPath","itemReference","propertyPath","propertyReference","split","Set","folderName","newFileMetadata","Date","getProjectUuid","lastModifiedDate","wasSaved","onChooseSaveProjectAsLocation","saveDialogOptions","showSaveDialogSync","saveAsLocation","onStartSaving","onMoveResources","setProjectFile","_x10","onAutoSaveProject","serializeToJSON","getWriteErrorMessage","forbiddenCharacterRegex","consecutiveSpacesRegex","getProjectLocation","projectName","newProjectsDefaultFolder","outputPath","projectFileName","substring","trim","cleanUpProjectFileName","isTryingToSaveInForbiddenPath","exePath","gdevelopDirectory","SvgIcon","viewBox","fill","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","lazyRequireGlob","scanForNewResources","createResource","glob","allExtensions","allFiles","filesToCheck","filePathsNotInResources","files","findFilesNotInResources","mapVector","relativeFilePath","applyResourceDefaults","setupResourcesWatcher","debouncedCallback","memoize","debounce","relativePath","folderPath","identifier","leading","trailing","getMemoizedFunc","obj","gameFile","autosaveFile","ignore","isProjectSplitInMultipleFiles","subscriptionIdPromise","subscriptionId","internalName","renderIcon","Computer","fontSize","getFileMetadataFromAppArguments","appArguments","POSITIONAL_ARGUMENTS_KEY","renderNewProjectSaveAsLocationChooser","setSaveAsLocation","projectLocation","newOutputPath","newOutputFileIdentifier","createOperations","getOpenErrorMessage","canFileMetadataBeSafelySaved","_canFileMetadataBeSafelySaved","showAlert","canFileMetadataBeSafelySavedAs","_canFileMetadataBeSafelySavedAs","createResourceOperations","updateInterface","cleanUserSelectionOfResources","informUser","click","resourceFilePath","getLocalResourceFullPath","showItemInFolder","locateResourceFile","openResourceFile","clipboard","writeText","copyResourceFilePath","submenu","_click","getAllResourceNames","toJSArray","getResourceFilePathStatus","removeResource","removeAllResourcesWithInvalidPath","LocalGDJSDevelopmentWatcher","shouldWatch","useGDJSDevelopmentWatcher","generateUnusedFilepath","basePath","alreadyUsedFilePaths","filenameWithoutExtension","downloadBlobToLocalFile","blobUrl","response","arrayBuffer","axios","responseType","moveUrlResourcesToLocalFiles","allResourceNames","resourcesToFetchNames","tokenForPrivateGameTemplateAuthorization","baseAssetsPath","downloadedFilePaths","erroredResources","fetchedResourcesCount","resourceFile","fetchTokenForPrivateGameTemplateAuthorizationIfNeeded","allResourcePaths","PromisePool","for","process","_parseLocalFilePathOr","downloadedFilePath","_downloadedFilePath","parseLocalFilePathOrExtensionFromMetadata","sanitizeFilename","isProductAuthorizedResourceUrl","extractDecodedFilenameWithExtensionFromProductAuthorizedUrl","isPublicAssetResourceUrl","extractDecodedFilenameWithExtensionFromPublicAssetResourceUrl","extractDecodedFilenameFromProjectResourceUrl","add","retryIfFailed","times","resourceUrl","encodedUrl","URL","isPrivateGameTemplateResourceAuthorizedUrl","href","searchParams","processByChunk","array","transformItem","isChunkTooBig","processChunk","currentItemIndex","nextChunk","mappedItem","readLocalFileToArrayBuffer","buffer","slice","byteOffset","byteLength","extensionToMimeType","aac","wav","mp3","ogg","png","jpg","jpeg","webp","ttf","otf","mp4","webm","xml","gz","js","readLocalFileToFile","extensionWithoutLeadingDot","File","moveAllLocalResourcesToCloudResources","oldFileMetadata","newCloudProjectId","allResourcesToUpload","alreadyDoneCount","checkIfIsGDevelopCloudBucketUrl","Boolean","getResourcesToUpload","_transformItem","resourceAbsolutePath","resourceAndFilesChunk","reduce","_processChunk","resourceAndFilesToUpload","uploadedProjectResourceFiles","getCredentialsForCloudProject","uploadProjectResourceFiles","movers","_movers","LocalFileStorageProvider","_2","ProjectResourcesCopier","copyAllResourcesTo","CloudStorageProvider","UrlStorageProvider","moveUrlResourcesToCloudProject","LocalResourceMover","moveAllProjectResources","_moveAllProjectResources","oldStorageProvider","newStorageProvider","mover","fetchers","_fetchers","moveUrlResourcesToCloudFilesIfPrivate","fetchRelativeResourcesToFullUrls","LocalResourceFetcher","fetchAllProjectResources","_fetchAllProjectResources","storageProvider","fetcher","LocalLoginProvider","auth","_loginWithEmailAndPassword","email","password","signInWithEmailAndPassword","_loginOrSignupWithProvider","provider","signal","promise","aborted","UserCancellationError","addEventListener","terminateWebSocket","setupAuthenticationWebSocket","onConnectionEstablished","connectionId","openExternalURL","onTokenReceived","_onTokenReceived","credential","GoogleAuthProvider","GithubAuthProvider","accessToken","OAuthProvider","idToken","id_token","nonce","raw_nonce","signInWithCredential","onError","onTimeout","create","authentication","setUpContextMenu","loginProvider","setLoginProvider","getArguments","Providers","disableCheckForUpdates","makeEventsFunctionCodeWriter","eventsFunctionsExtensionWriter","eventsFunctionsExtensionOpener","ProjectStorageProviders","storageProviders","defaultStorageProvider","getStorageProviderOperations","getStorageProviderResourceOperations","initialFileMetadataToOpen","MainFrame","renderMainMenu","ElectronMainMenu","renderPreviewLauncher","renderShareDialog","ShareDialog","isSavingProject","automatedExporters","manualExporters","initialTab","renderGDJSDevelopmentWatcher","resourceMover","resourceFetcher","resourceSources","resourceExternalEditors","localResourceExternalEditors","extensionsLoader","makeExtensionsLoader","ObjectsEditorService","ObjectsRenderingService"],"sourceRoot":""}